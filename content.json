{"pages":[],"posts":[{"title":"Brook crontab定时重启","text":"以下同步时间选择其中一种,如果无法同步本地时间请google下(关键字centos7或者centos6或者debian时间同步本地时间等关键字)方法1.校准时间同步本地时间 date -R 查看vps时间 sudo -i root权限进入 123yum -y install ntp ntpdate //安装ntpdate工具ntpdate cn.pool.ntp.org //设置系统时间与本地网络时间同步hwclock --systohc //将系统时间写入硬件时间 方法2.校准时间同步本地时间 date -R 查看vps时间 123456yum install ntp //安装ntp服务systemctl enable ntpd //开机启动服务systemctl start ntpd //启动服务timedatectl set-timezone Asia/Shanghai //更改时区timedatectl set-ntp yes //启用ntp同步ntpq -p //同步时间 crontab服务 12/sbin/service crond start (开启crontab无任何提示表示已经开启)/sbin/service crond status (查看状态) 安装crontab：(有些系统没有安装crontab则需要安装,如果系统本身已经安装了请跳过这一步骤) yum install crontabs (安装crontab) 服务操作说明：123456789/sbin/service crond start (启动服务)/sbin/service crond stop (关闭服务)/sbin/service crond restart (重启服务)/sbin/service crond reload (重新载入配置 //重新载入配置)/sbin/service crond status (查看crond是否正常运行) crontab -e (输入i键,复制以下代码ctrl+c,黏贴ctrl+v到加入计划任务,可自定义添加需要的功能) 123*/1 * * * * date >> ~/a.log 2>&1 */1 * * * * sudo journalctl -b -u brook >> ~/a.log 2>&1*/1 * * * * /bin/systemctl restart brook.service >> ~/a.log 2>&1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134crontab -l (查看已经添加的crontab任务)tail ~/a.log 查看最近10条日志more /root/a.log 查看所有日志tail -f /var/log/cron 查看正常运行的crontab计划任务验证crontab计划任务brook运行状态可以根据特定字段过滤输出journalctl -b 显示本次启动后的所有日志：journalctl -f 查看正在输出的进程sudo journalctl -b -u brook 查看brook状态man 1 journalctl 查看所有 journalctl使用方法rm -rf ~/a.log 日志清除方法实例1：每1分钟执行一次command命令：* * * * * command 实例2：每小时的第3和第15分钟执行命令：3,15 * * * * command 实例3：在上午8点到11点的第3和第15分钟执行命令：3,15 8-11 * * * command 实例4：每隔两天的上午8点到11点的第3和第15分钟执行命令：3,15 8-11 */2 * * command 实例5：每个星期一的上午8点到11点的第3和第15分钟执行命令：3,15 8-11 * * 1 command 实例6：每晚的21:30重启smb 命令：30 21 * * * /etc/init.d/smb restart 实例7：每月1、10、22日的4 : 45重启smb 命令：45 4 1,10,22 * * /etc/init.d/smb restart 实例8：每周六、周日的1 : 10重启smb命令：10 1 * * 6,0 /etc/init.d/smb restart 实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb 命令：0,30 18-23 * * * /etc/init.d/smb restart 实例10：每星期六的晚上11 : 00 pm重启smb 命令：0 23 * * 6 /etc/init.d/smb restart 实例11：每一小时重启smb 命令：* */1 * * * /etc/init.d/smb restart 实例12：晚上11点到早上7点之间，每隔一小时重启smb 命令：* 23-7/1 * * * /etc/init.d/smb restart 实例13：每月的4号与每周一到周三的11点重启smb 命令：0 11 4 * mon-wed /etc/init.d/smb restart 实例14：一月一号的4点重启smb 命令：0 4 1 jan * /etc/init.d/smb restart 实例15：每小时执行/etc/cron.hourly目录内的脚本命令：01 * * * * root run-parts /etc/cron.hourly","link":"/2020/06/10/Brook-crontab%E5%AE%9A%E6%97%B6%E9%87%8D%E5%90%AF/"},{"title":"Centos7 升级python2至python3","text":"linux 的centos7 默认安装了 python2.7.5 , 需要升级到最新版本 查看python 版本1python -V 查看软连接指向1ls -al /usr/bin/python 重命名软连接1mv /usr/bin/python /usr/bin/python2.7.5 下载并解压 python12wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgztar -xf Python-3.6.4.tgz 安装python1234cd Python-3.6.4./configuremakemake install python3.6.4 已经安装到系统里了。 python2.7.5 由于软连接被重命名了。所以。你查看python 版本时候。会不存在 12命令 ： python -V结果： -bash: /usr/bin/python: No such file or directory 让系统默认使用Python 3.6.4由于软连接指向被修改。此时 yum不能使用。需编辑一下 yum 的配置文件 1vi /usr/bin/yum 把文件头部的 1#!/usr/bin/python 改成 1#!/usr/bin/python2.7.5 保存退出即可！shift+:输入wq 建立新的链接123rm -rf /usr/bin/pythonrm -rf /usr/bin/pyln -s /usr/local/bin/python3.6 /usr/bin/python 验证是否成功1python -V","link":"/2020/09/11/Centos7-%E5%8D%87%E7%BA%A7python2%E8%87%B3python3/"},{"title":"Github API","text":"对于常用Github的用户来说，经常有一些自动化的需求。比如我的需求是定时备份Github的issues和comments到本地。以下为Github的API的使用参考 基本访问路径 (Root Endpoints) 一开始读文档的时候，照着它的事例直接在命令行里curl，或者在InSomnia或Postman软件里访问，都完美显示200状态。可是一旦把链接里改写成自己的用户名就各种显示404无页面。还以为是授权问题，然后在页头HEADER中按照各种方式试了username和token密钥，都没用还是404。结果发现，原来不是方法的问题，纯粹是链接地址没写对！实际上只是读取的话，完全不用任何授权，可以在命令行、Insomnia、网页等各种情况下直接输入链接访问任何人的所有公开信息。然后对照官方路径列表Root Endpoints得到的链接，好像怎么访问都不对。反而在Stackoverflow中看到的一个链接，顺藤摸瓜自己发现了各种正确的访问路径，总结如下： 首先！访问的链接最后不能有/。如https://api.github.com/users/solomonxie是可以访问到我个人信息的，但是https://api.github.com/users/solomonxie/就不行了，唯一不同是多了一个/.其次！不同于一般URL访问，GIthub的API访问链接是区分大小写的！个人主要信息。 https://api.github.com/users/用户名,得到数据如下图：image 个人所有repo。https://api.github.com/users/用户名/repos。会得到一个repo的JSON格式列表。repo详细信息。https://api.github.com/repos/用户名/仓库名。repo的路径就开始和个人信息不同了。获取某个repo的内容列表。https://api.github.com/repos/solomonxie/gists/contents，注意这只会返回根目录的内容。获取repo中子目录的内容列表。https://api.github.com/repos/solomonxie/gists/contents/目录名。一定要注意这里一定要完全遵循原文件名的大小写，否则无法获得信息。如果是更深层的内容，则在链接列按照顺序逐级写上目录名称。获取repo中某文件信息（不包括内容）。https://api.github.com/repos/solomonxie/gists/contents/文件路径。文件路径是文件的完整路径，区分大小写。只会返回文件基本信息。获取某文件的原始内容（Raw）。1. 通过上面的文件信息中提取download_url这条链接，就能获取它的原始内容了。2. 或者直接访问：https://raw.githubusercontent.com/用户名/仓库名/分支名/文件路径repo中所有的commits列表。https://api.github.com/repos/用户名/仓库名/commits。某一条commit详情。https://api.github.com/repos/用户名/仓库名/commits/某一条commit的SHAissues列表。https://api.github.com/repos/用户名/仓库名/issues。某条issue详情。https://api.github.com/repos/用户名/仓库名/issues/序号。issues都是以1,2,3这样的序列排号的。某issue中的comments列表。https://api.github.com/repos/用户名/仓库名/issues/序号/comments。某comment详情。https://api.github.com/repos/用户名/仓库名/issues/comments/评论详情的ID。其中评论ID是从issues列表中获得的。 查询参数 (Parameters)如果在上面基本链接中加入查询条件，那么返回的数据就是filtered，过滤了的。比如要求只返回正在开放的issues，或者让列表数据分页显示。常用如下： 分页功能。格式是?page=页数&per_page=每页包含数量。如https://api.github.com/users/solomonxie/repos?page=2&per_page=3 issues状态。格式是?state=状态。如https://api.github.com/repos/solomonxie/solomonxie.github.io/issues?state=closed","link":"/2020/08/06/Github-API-%E8%B0%83%E7%94%A8/"},{"title":"SSR多用户脚本搭建","text":"搭建环境centos7/debian系统第一步sudo -i 1sudo -i 第二步.ubuntu 系统安装 Curl 1apt-get update -y && apt-get install curl -y 第二步.centos 系统安装 Curl 和 wget 12yum update -y && yum install curl -y yum install wget 第三步.安装一键脚本 1wget -N --no-check-certificate https://raw.githubusercontent.com/ComeBey/more-user-ssr/master/hasan.sh && chmod +x hasan.sh && bash hasan.sh 第四步:调用命令调试 1bash hasan.sh","link":"/2020/06/16/SSR%E5%A4%9A%E7%94%A8%E6%88%B7%E8%84%9A%E6%9C%AC%E6%90%AD%E5%BB%BA/"},{"title":"shadowsocks原生部署","text":"准备工作1.root权限 1sudo -i 2.系统包更新 1yum update 下载安装pip123curl \"https://bootstrap.pypa.io/get-pip.py\" -o \"get-pip.py\" #下载pippython get-pip.py #安装pip 安装SS和配置SS参数1.安装shadowsocks 1pip install shadowsocks 2.root权限输入vi /etc/shadowsocks.json 配置shadowsocks参数，如果不能vi进去可以使用nano或者vim进行配置 1vi /etc/shadowsocks.json 1234567{ \"server\":\"0.0.0.0\", \"server_port\":8388, \"password\":\"password\", \"method\":\"aes-256-cfb\"} 创建启动脚本1vi /etc/systemd/system/shadowsocks.service 1234567[Unit]Description=Shadowsocks[Service]TimeoutStartSec=0ExecStart=/usr/bin/ssserver -c/etc/shadowsocks.json[Install]WantedBy=multi-user.target 温馨提示：Shadowsocks需要安装libsodium加密库，否则只能使用“aes-256-cfb”无法使用其他加密协议，请执行以下代码： 123wget https://github.com/jedisct1/libsodium/releases/download/1.0.18-RELEASE/libsodium-1.0.18.tar.gztar xf libsodium-1.0.18.tar.gz && cd libsodium-1.0.18 调试服务12345systemctl enable shadowsocks #让服务ss服务生效开机启动systemctl start shadowsocks #启动sssystemctl status shadowsocks -l #查看状态 bbr install12yum -y install wgetwget \"https://raw.githubusercontent.com/ComeBey/rootfw-bbr/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh 然后自己去安装BBR加速温馨提示：你真的懂吗？对于懂得用ss的朋友来说就是好用，对于不懂得使用ss的朋友来说即使您现在使用的是v2ray或者trojan GFW真要墙你IP也是轻而易举，不管使用任何翻墙软件大部分情况是在于人，在谁的手中使用，shadowsocks一样可以配置NGINX等服务搭配使用，一样可以加CDN不要被一些UP主带坏了节奏，任何问题如果经不起验证都是扯蛋","link":"/2020/06/27/SS%E5%8E%9F%E7%94%9F%E9%83%A8%E7%BD%B2/"},{"title":"v2ray访问TOR洋葱浏览器","text":"Tor高匿名浏览器神一样的存在，暗网入口，开启您的学术探索。Tor中文版本 官方下载，建议大家使用英文版本，不要问为什么，感兴趣的朋友以后参加我课程就知道了。 大家都知道通过SS或者SSR或者其他代理简单设置后可以使用tor洋葱浏览器，一直有很多朋友问我如何通过v2ray代理访问tor洋葱浏览器，我认为这是一个常识和对v2ray基本的了解，那有人就会问为什么要使用tor浏览器？洋葱浏览器是什么呢？关于这些问题自己Google下。简单讲就是通过tor浏览器访问暗网，如果把谷歌搜索引擎比喻成为地球那么暗网就是浩瀚的宇宙，里面无所不有…。那么今天我简单写个教程让你们能够使用tor浏览器。 如下图所示这张图片勾选 使用代理访问互联网 当您自己搭建的代理服务器可以正常访问外网的前提下，在使用v2ray代理连接后，在访问tor浏览器，提示连接不成功或拒绝访问。为什么呢？这是sniffing的问题，关闭sniffing即可v2ray有一个sniffing功能，它可以检测http和tls流量中的域名并把它提取出来交给vps解析，然后把这些流量的数据包的目的地址重写为解析所得的地址。其本意是解决dns污染的问题，但因为tor连接用了一些不寻常的方式(比如域名和ip不匹配等)，所以此功能反而会使连接失败。所以我们只需要把v2ray服务端config.json sniffing 设置为false 和v2rayN关闭流量探测即可正常访问tor浏览器。如果你服务器config.json配置文件中没有sniffing参数则无需更改任何，直接更改v2rayN关闭流量探测即可。 温馨提示：当我们如果搭建好了自己的代理服务器后，选择使用代理访问互联网因为洋葱浏览器独特性，其实洋葱浏览器自动接入自带多国家节点做跳板，说白了就是多个国家节点中转，这也是为了保证使用者匿名和安全性。所以通常访问暗网速度会比一般浏览器更慢，所以我们推荐使用自己搭建的代理服务器通过洋葱路由连接来正常使用tor浏览器。假设你购买的机场节点访问Google速度非常非常慢，同样通过洋葱浏览器访问会更慢。反之其他任何连接方法都不推荐。 如下图所示：v2rayN关闭流量探测功能 如下图所示：请看清楚自己服务器socks参数 和http参数 在配置tor浏览器选择使用代理访问互联网在地址选项中填写127.0.0.1 端口按实际情况v2rayN显示参数填写，用户名和密码无需填写，点击链接tor浏览器即可。SOCKS其实是一种网络代理协议。SOCKS代理又分为SOCKS4和SOCKS5，二者不同的是SOCKS4代理只支持TCP协议（即传输控制协议），而SOCKS5代理则既支持TCP协议又支持UDP协议（即用户数据包协议），还支持各种身份验证机制、服务器端域名解析等。SOCK4能做到的SOCKS5都可得到，但SOCKS5能够做到的SOCK4则不一定能做到！在实际配置tor过程中SOCKS4和SOCKS5和http/https都可以选择，需要注意v2rayN SOCKS 和http/https 参数端口。 电报群讨论：telegram温馨提示：请各位YouTube UP主或博客主站长在拷贝本博客文章全站代码注明出处，请尊重知识尊重文章版权。","link":"/2020/10/05/Tor/"},{"title":"V2ray+WebSocket+TLS+Nginx","text":"Finalshell SSH连接工具下载Mobaxterm SSH连接工具下载 centos7系统环境搭建，温馨提示：请使用centos7系统搭建，如果学习能力强可以Google搜索Debian或其他系统搭建方法，只是部分代码不一样而已，V2Ray+WebSocket+TLS+Nginx 前几期视频分别提到过 TLS 和 WebSocket 的配置方法，而本文搭配 Web 服务并同时实现 TLS 和 WebSocket浏览器域名访问自动跳转https有简单前端网页。关于 Web 的软件官方给出Nginx，Caddy 和 Apache 三个例子，三选一即可 安装前准备更新服务器12yum update -y 更改root密码centos debian服务器root密码更改 安装bbr123456centos7系统yum -y install wgetwget \"https://raw.githubusercontent.com/ComeBey/rootfw-bbr/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh debian系统 请确定服务器已经安装了wget 如没有按照请先执行这条代码 apt-get install wgetwget --no-check-certificate -O tcp.sh https://github.com/cx9208/Linux-NetSpeed/raw/master/tcp.sh && chmod +x tcp.sh && ./tcp.sh 安装v2ray代码1bash","link":"/2020/06/16/V2ray+WebSocket+TLS+Nginx/"},{"title":"JSON配置超集收录","text":"本文提供主流json配置代码请VIP会员仔细研究使用实战 打开GitHub收藏订阅我会定期更新优化好的代码，涵盖了主流FQ配置config.json,感兴趣的朋友也可以一起提交新的配置文件github项目地址","link":"/2021/02/05/VIP%E4%BC%9A%E5%91%98JSON%E9%85%8D%E7%BD%AE%E8%B6%85%E9%9B%86%E6%94%B6%E5%BD%95/"},{"title":"VLESS TCP 和 WS (TLS 回落 & 分流进阶配置)","text":"Finalshell SSH连接工具下载Mobaxterm SSH连接工具下载 本章主要讲解利用 VLESS 强大的回落分流特性，实现了 443 端口 VLESS over TCP with TLS 和任意 WSS 的完美共存.该配置供参考，你可以将 WS 上的 VLESS 换成 VMess 等其它任何协议，以及设置更多 PATH、协议共存，都可以做到.部署后，你可以同时通过 VLESS over TCP with TLS 和任意 WebSocket with TLS 方式连接到服务器，其中后者都可以通过 CDN.经实测，VLESS 回落分流 WS 比 Nginx 反代 WS 性能更强，传统的 VMess + WSS 方案完全可以迁移过来，且不失兼容.在这里感谢v2fly团队v2fly官方网站 博主搭建环境：1.谷歌云centos7 64系统 2.域名一个 服务器时间同步设置硬件时钟调整为与本地时钟一致, 设置时区为上海 date -R 是查看服务器当前时间centos7时间同步 123date -Rtimedatectl set-local-rtc 1timedatectl set-timezone Asia/Shanghai Debian系统同步时间如下： 123date -Rrm -rf /etc/localtimecp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime debian安装依赖 12apt updateapt install curl centos7安装依赖 12yum makecacheyum install curl 安装dat和release.sh12curl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.shcurl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh 安装和更新V2Ray1bash install-release.sh v2ray输出如下温馨提示：不同版本拉取数据输出内容不一样，请按实际情况为例本实例安装的为v4.27.0版本，v2fly维护版本拉取最新数据输出如下内容 “ + “ 代表目前输出内容，” - “代表在老版本基础上删除的信息 每行代码 \" + \" ，\" - \"号忽略123456789101112131415161718192021222324+info: unzip is installed.+info: Extract the V2Ray package to /tmp/tmp.RS0y2YR2ZS/ and prepare it for installation.+installed: /usr/local/bin/v2ray+installed: /usr/local/bin/v2ctl+installed: /usr/local/lib/v2ray/geoip.dat+installed: /usr/local/lib/v2ray/geosite.dat+installed: /usr/local/etc/v2ray/config.json-installed: /usr/local/etc/v2ray/00_log.json-installed: /usr/local/etc/v2ray/01_api.json-installed: /usr/local/etc/v2ray/02_dns.json-installed: /usr/local/etc/v2ray/03_routing.json-installed: /usr/local/etc/v2ray/04_policy.json-installed: /usr/local/etc/v2ray/05_inbounds.json-installed: /usr/local/etc/v2ray/06_outbounds.json-installed: /usr/local/etc/v2ray/07_transport.json-installed: /usr/local/etc/v2ray/08_stats.json-installed: /usr/local/etc/v2ray/09_reverse.json-installed: /var/log/v2ray/+installed: /var/log/v2ray/access.log+installed: /var/log/v2ray/error.log+installed: /etc/systemd/system/v2ray.service+installed: /etc/systemd/system/v2ray@.service+removed: /tmp/tmp.KojGXm19Pa/+info: V2Ray v4.27.0 is installed. 安裝最新發行的geoip.dat和geosite.dat1bash install-dat-release.sh 创建和编辑配置文件1234/usr/local/etc/v2ray #Finalshell 或者Mobaxterm 使用vim /usr/local/etc/v2rayvi /usr/local/etc/v2raynano /usr/local/etc/v2ray 在/usr/local/etc/v2ray下面创建或编辑config.json配置文件复制以下代码到config.json /usr/local/etc/v2ray/config.json1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374{ \"log\": { \"loglevel\": \"warning\" }, \"inbounds\": [ { \"port\": 443, \"protocol\": \"vless\", \"settings\": { \"clients\": [ { \"id\": \"\", // 填写你的 UUID \"level\": 0, \"email\": \"love@v2fly.org\" } ], \"decryption\": \"none\", \"fallbacks\": [ { \"dest\": 80 }, { \"path\": \"/websocket\", // 必须换成自定义的 PATH \"dest\": 3621, \"xver\": 1 } ] }, \"streamSettings\": { \"network\": \"tcp\", \"security\": \"tls\", \"tlsSettings\": { \"alpn\": [ \"http/1.1\" ], \"certificates\": [ { \"certificateFile\": \"/@@/￥￥/comebey.crt\", // 换成你的证书，绝对路径 \"keyFile\": \"/@@/￥￥/comebey.key\" // 换成你的私钥，绝对路径 } ] } } }, { \"port\": 3621, \"listen\": \"127.0.0.1\", \"protocol\": \"vless\", \"settings\": { \"clients\": [ { \"id\": \"\", // 填写你的 UUID \"level\": 0, \"email\": \"love@v2fly.org\" } ], \"decryption\": \"none\" }, \"streamSettings\": { \"network\": \"ws\", \"security\": \"none\", \"wsSettings\": { \"acceptProxyProtocol\": true, // 提醒：若你用 Nginx/Caddy 等反代 WS，需要删掉这行 \"path\": \"/websocket\" // 必须换成自定义的 PATH，需要和上面的一致 } } } ], \"outbounds\": [ { \"protocol\": \"freedom\" } ]} config_client_tcp_tls.json123456789101112131415161718192021222324252627282930313233343536373839404142{ \"log\": { \"loglevel\": \"warning\" }, \"inbounds\": [ { \"port\": 10800, \"listen\": \"127.0.0.1\", \"protocol\": \"socks\", \"settings\": { \"udp\": true } } ], \"outbounds\": [ { \"protocol\": \"vless\", \"settings\": { \"vnext\": [ { \"address\": \"example.com\", // 换成你的域名或服务器 IP（发起请求时无需解析域名了） \"port\": 443, \"users\": [ { \"id\": \"\", // 填写你的 UUID \"encryption\": \"none\", \"level\": 0 } ] } ] }, \"streamSettings\": { \"network\": \"tcp\", \"security\": \"tls\", \"tlsSettings\": { \"serverName\": \"example.com\" // 换成你的域名 } } } ]} config_client_ws_tls.json12345678910111213141516171819202122232425262728293031323334353637383940414243444546{ \"log\": { \"loglevel\": \"warning\" }, \"inbounds\": [ { \"port\": 10800, \"listen\": \"127.0.0.1\", \"protocol\": \"socks\", \"settings\": { \"udp\": true } } ], \"outbounds\": [ { \"protocol\": \"vless\", \"settings\": { \"vnext\": [ { \"address\": \"example.com\", // 换成你的域名或服务器 IP（发起请求时无需解析域名了） \"port\": 443, \"users\": [ { \"id\": \"\", // 填写你的 UUID \"encryption\": \"none\", \"level\": 0 } ] } ] }, \"streamSettings\": { \"network\": \"ws\", \"security\": \"tls\", \"tlsSettings\": { \"serverName\": \"example.com\" // 换成你的域名 }, \"wsSettings\": { \"path\": \"/websocket\" // 必须换成自定义的 PATH，需要和服务端的一致 } } } ]} v2ray调试 123sudo systemctl restart v2raysudo systemctl status -l v2raysudo systemctl daemon-reload 设置v2ray开机启动 1systemctl enable v2ray 创建文件夹指定证书和证书存放绝对路径地址，可以自定义。如/etc/v2ray下放置密钥和证书 生成证书如果你已经有其他证书可忽略，把证书和密钥放到服务器指定目录下。申请证书方法太多可通过安装acme.sh工具生成证书或其他方法生成证书，可Google搜索。 1.安装acem.sh证书生成工具，以下提供3种方法安装，选其中任意一种方法安装证书工具 (温馨提示：自动升级acme.sh在root下输入 acme.sh upgrade) /root/.acme.sh1234567curl https://get.acme.sh | sh // 如提示安装失败 请先安装curl 输入 yum -y install curlwget -O - https://get.acme.sh | sh //如提示安装失败请（先安装wget）输入 yum -y install wget 已经安装了忽略git clone https://github.com/acmesh-official/acme.sh.git // 如提示安装失败 先安装git 已经安装了的忽略 输入 yum install gitcd ./acme.sh./acme.sh --install 通过以上代码安装acme.sh提示红色抱错 你可以按实际相关情况而定安装依赖 比如安装socat 或者 netcat 12345678centos7 yum install opensslcentos7 yum install socat #通过80端口生成证书的依赖centos7 yum isntall netcat debian apt-get install openssl cron socat curldebian apt-get -y install netcat 安装成功后执行 source ~/.bashrc #以确保脚本所设置的命令别名生效 2.生成证书 路径为/root/.acme.sh文件下 安装好后可自行查看温馨提示：通过acme.sh生成证书有多种方法：例如—自动DNS API集成 如：cloudflare DNS API 令牌 和 使用全局API密钥 acme.sh支持大多数dns生成证书例如—使用DNS手动模式，等多种其他安装方法，如果你是个好学的人可Google 生成证书如下：本期视频只用指定端口 生成证书 推荐使用443端口生成证书 （一般用单域名足以，毕竟是翻墙用无需搞那么多花里胡哨的多域，比如：主域baidu.com那么不建议使用 www.baidu.com 因为是翻墙的前端web请自定义比如tw.baidu.com,前缀tw可以自定义请不要写太长，主域baidu.com和二级 www.baidu.com 可以备用你懂的 ） 通过侦听80端口申请证书，如果80端口被占用,请使用443端口,请确保这些端口都打开了 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone -k ec-256 如果您80在反向代理或负载均衡器后面使用非标准端口，则可以–httpport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone --httpport 端口 侦听443端口以颁发证书，请确保443端口开启 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn -k ec-256 如果您443在反向代理或负载均衡器后面使用非标准端口，则可以–tlsport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn --tlsport 端口 -k表示密钥长度，后面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，带有 ec 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书 温馨提示：如何80或者443端口被占用导致我们无法申请密钥和证书，我们可以通过kill封杀端口在重新申请。 12345678netstat -tlnp|grep 80或者netstat -tlnp|grep 443然后kill 1103（这个1103是进程端口id）如果终止不了，可以强制终止kill -9 1103 证书和密钥到指定路径/etc/v2ray123ecc 迁移 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --eccrsa 迁移 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key 將 /etc/v2ray/v2ray.key（路径可自定义） 修改為 644 权限 1chmod 644 /etc/v2ray/v2ray.key BBr安装1wget \"https://raw.githubusercontent.com/ComeBey/rootfw-bbr/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh 查询tls开启状态https://www.ssllabs.com/ssltest/index.html 输入自己域名查询即可关于config.json配置文件可以自己写，当然也包括其他各种负载均衡，反向代理。如果想短时间内提升自己的可以参加我的培训课。 如果想卸载V2Ray执行下面代码1bash install-release.sh --remove YouTube视频 电报群添加","link":"/2020/10/25/VLESS%20TCP%20%E5%92%8C%20WS%20(TLS%20%E5%9B%9E%E8%90%BD%20&%20%E5%88%86%E6%B5%81%E8%BF%9B%E9%98%B6%E9%85%8D%E7%BD%AE)/"},{"title":"VLESS XTLS 基于XRAY项目配置","text":"本文章主要浅显的讲解基于v2fly项目中v2ray code配置XRAY项目中黑科技XTLS协议.早些时间我在VIP课程中有写过一篇文章，里面有详细的记录配置过程和超强的回落分流，因为之前v2fly项目是融合了XRAY项目中的XTLS。只是因为工作原因当时没有录制视频教程。但是现在v2fly和XRAY是分开的，所以我必须重新写一篇文章。之前搭建方无法使用需要更改些代码。目前v2ray可以说在一个config.json中实现多种不同的协议且同时工作。这也奠定了在代理所有软件中的地位。也意味着v2ray迈进了一个新的台阶，v2ray里面的功能很多很多，有些功能大部分朋友都没用过。这也是为什么我一直在坚信v2ray所有幕后维护开发项目团队造福海内外墙友的决心，让所有海内外朋友开启了新的学术之旅。这里利用 VLESS 强大的回落分流特性，实现了 443 端口尽可能多的协议、配置的完美共存，包括v2rayN客户端可以同时通过下列方式连接到服务器在这里感谢v2fly项目团队v2fly官方网站 和 感谢XRAY项目团队。 重要提示：v2ray N最新下载v2ray core最新下载xray core最新下载Finalshell SSH连接工具下载Mobaxterm SSH连接工具下载 博主搭建环境：1.谷歌云centos7 64系统 2.域名一个且解析好推荐cloudflare解析 3.通过freessl申请证书密钥 官方一键安装安装依赖部分vps需要安装依赖，如已安装直接跳过 1yum install wget -y 正式安装1wget -O Xray-TLS+Web-setup.sh --no-check-certificate https://github.com/kirin10000/Xray-script/raw/main/Xray-TLS+Web-setup.sh 赋予脚本权限1chmod +x Xray-TLS+Web-setup.sh 执行脚本1./Xray-TLS+Web-setup.sh 安装时长说明此脚本的安装时间比较长，根据VPS的配置以及安装时的选项不同，安装时长在 5-60分钟 不等。 对于一台单核1G内存的VPS来说，不选择更新系统，安装时长在20分钟左右。 所以本脚本不适合反复重置系统安装，这会消耗您的大量时间。 本脚本适合安装一次后长期使用，如果需要更换配置和域名等，在管理界面都有相应的选项。 为什么脚本安装时间那么长？之所以时间相比别的脚本长，有三个原因： 1.集成了安装bbr的功能2.集成更新系统及软件包的功能3.(主要原因) 脚本的Nginx(即Web服务器)是采用源码编译的形式，其它脚本通常直接获取二进制程序其中安装bbr和更新系统及软件包可以选择跳过，在一定程度上缩短时间。 (并不推荐您这么做) Nginx之所以采用编译的形式，主要考虑到的主要原因为： 1.便于管理2.便于适配多种系统编译相比直接安装二进制文件的优点有： 1.运行效率高 (编译时采用了-O3优化)2.软件版本新 (可以对比本脚本与其他脚本Nginx的版本) 缺点就是编译耗时长，如果有快速安装的需求，推荐手动安装。 下载v2ray Nv2ray N-3.29版本v2ray N最新下载 下载Xray-core选其中一个下载xray-Windows-64Xray-macos-64xray core最新下载 主要提示：请把Xray-core里面的数据复制黏贴到v2ray N文件夹下 手动安装创建文件夹首先连接好自己服务器。需要更改root密码请访问。root权限下，指定证书和证书存放绝对路径地址，可以用Finalshell ssh连接工具可视化操作编辑，也可以通过纯代码操作，存放密钥证书路径可自定义。如/etc/xray下放置密钥和证书.也可以通过代码执行 比如：可以cd / 到根目录， 然后在进入到cd /usr/local/etc路径下，然后创建SSL文件夹 mkdir SSL 这个SSL文件夹下面用来存放证书和密钥。 生成证书如果你已经有证书可忽略，把证书和密钥放到服务器指定目录下。申请证书方法太多可通过安装acme.sh工具生成证书或其他方法生成证书，很多新手很容易出错，当然也可Google搜索其他获取证书方法。 本文章只推荐 通过freessl注册账号申请证书密钥 大家可以自己去申请免费一年的证书，也可以通过通过下载keymanager申请 上传证书密钥1.通过lrzsz上传，输入rz后可多个文件同时上传 install lrzsz123sudo -iyum -y install lrzszrz 2.通过lrzsz上传，输入sz下载文件 1sz + 文件名（不是文件夹名） 安装Xray服务温馨提示：老版本和新版本选其中一种方法安装即可。推荐新版本。Install & Upgrade Xray-core and .dat files1.老版本（备用） 1bash","link":"/2020/10/25/VLESS%20XTLS%20%E5%9F%BA%E4%BA%8EXRAY%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"},{"title":"vless xray搭建最新配置方法","text":"本文主要讲解2021 xray项目最新搭建xtls及配置方法，及安装过程遇到的一些问题。老版本xray搭建方法已经更改，请大家使用最新xray官方项目及官方安装方法。如果还需要使用老版本的朋友可以看文章 xray官方项目 v2fly官方网站 感谢XRAY项目及v2fly团队。 重要提示：v2ray N最新下载v2ray core最新下载xray core最新下载Finalshell SSH连接工具下载Mobaxterm SSH连接工具下载 博主搭建环境：1.谷歌云centos7 64系统 2.域名一个，且解析好推荐cloudflare解析 3.[通过宝塔领取免费一年域名证书(https://www.bt.cn/?invite_code=MV9qb2RlaHU=) 或者 通过freessl申请证书密钥或使用acmesh-official BBR加速安装1.部分vps需要安装依赖如下： 12yum install wget -y 2.安装BBR（一键安装./tcp.sh 启动后台管理） 1wget \"https://raw.githubusercontent.com/ComeBey/rootfw-bbr/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh 下载v2ray N温馨提示：推荐安装v2ray N最新下载v2ray N-3.29版本v2ray N最新下载 下载Xray-core温馨提示：推荐安装xray core最新下载xray-Windows-64Xray-macos-64xray core最新下载 重要提示：请把Xray-core里面的数据复制黏贴到v2ray N文件夹下 创建文件夹首先连接好自己服务器。需要更改root密码请访问。root权限下，指定证书和证书存放绝对路径地址，可以用Finalshell ssh连接工具可视化操作编辑，也可以通过纯代码操作，存放密钥证书路径可自定义。如/etc/xray下放置密钥和证书.也可以通过代码执行 比如：可以cd / 到根目录， 然后在进入到cd /usr/local/etc路径下，然后创建SSL文件夹 mkdir SSL 这个SSL文件夹下面用来存放证书和密钥。 生成证书密钥如果你已经有证书可忽略，把证书和密钥放到服务器指定目录下。申请证书方法太多可通过安装acme.sh工具生成证书或其他方法生成证书，很多新手很容易出错，当然也可Google搜索其他获取证书方法。 本文章只推荐 通过宝塔领取免费一年域名证书 或者 通过freessl申请证书密钥 也可以通过通过下载keymanager申请 温馨提示：有些朋友之前问我宝塔申请证书密钥和freessl申请需要身份证验证会不安全。我想访问下这些朋友，你是搞造原子弹还是搞国防科研还是黑客？你怎么那么高估自己在GFW心中的位置？找存在感？不要做违法事情就可以了。GFW每天都很忙没时间每天探测你网络数据，现在的技术手段，如果GFW一定要封你IP，你就铁定不能FQ，不管你用什么主流的加密协议。如果非常有经验的朋友也不会来看本篇文章。如果你必须ssl注册信息匿名，自己想办法，这篇文章可以忽略。 /root/.acme.sh1234567curl https://get.acme.sh | sh // 如提示安装失败 请先安装curl 输入 yum -y install curlwget -O - https://get.acme.sh | sh //如提示安装失败请（先安装wget）输入 yum -y install wget 已经安装了忽略git clone https://github.com/acmesh-official/acme.sh.git // 如提示安装失败 先安装git 已经安装了的忽略 输入 yum install gitcd ./acme.sh./acme.sh --install 通过以上代码安装acme.sh提示红色抱错 你可以按实际相关情况而定安装依赖 比如安装socat 或者 netcat 12345678centos7 yum install opensslcentos7 yum install socat #通过80端口生成证书的依赖centos7 yum isntall netcat debian apt-get install openssl cron socat curldebian apt-get -y install netcat 安装成功后执行 source ~/.bashrc #以确保脚本所设置的命令别名生效 2.生成证书 路径为/root/.acme.sh文件下 安装好后可自行查看温馨提示：通过acme.sh生成证书有多种方法：例如—自动DNS API集成 如：cloudflare DNS API 令牌 和 使用全局API密钥 acme.sh支持大多数dns生成证书例如—使用DNS手动模式，等多种其他安装方法，如果你是个好学的人可Google 生成证书如下：本期视频只用指定端口 生成证书 推荐使用443端口生成证书 （一般用单域名足以，毕竟是翻墙用无需搞那么多花里胡哨的多域，比如：主域baidu.com那么不建议使用 www.baidu.com 因为是翻墙的前端web请自定义比如tw.baidu.com,前缀tw可以自定义请不要写太长，主域baidu.com和二级 www.baidu.com 可以备用你懂的 ） 通过侦听80端口申请证书，如果80端口被占用,请使用443端口,请确保这些端口都打开了 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone -k ec-256 如果您80在反向代理或负载均衡器后面使用非标准端口，则可以–httpport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone --httpport 端口 侦听443端口以颁发证书，请确保443端口开启 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn -k ec-256 如果您443在反向代理或负载均衡器后面使用非标准端口，则可以–tlsport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn --tlsport 端口 -k表示密钥长度，后面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，带有 ec 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书 温馨提示：如何80或者443端口被占用导致我们无法申请密钥和证书，我们可以通过kill封杀端口在重新申请。 12345678netstat -tlnp|grep 80或者netstat -tlnp|grep 443然后kill 1103（这个1103是进程端口id）如果终止不了，可以强制终止kill -9 1103 证书和密钥到指定路径温馨提示：通过acme.sh申请证书密钥可能有.crt或者.cer等格式证书只需要替换即可 /etc/v2ray123ecc 迁移 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/v2ray/v2ray.cer --keypath /etc/v2ray/v2ray.key --eccrsa 迁移 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/v2ray/v2ray.cer --keypath /etc/v2ray/v2ray.key 將 /etc/v2ray/v2ray.key（路径可自定义） 修改為 644 权限 1chmod 644 /etc/v2ray/v2ray.key 上传证书密钥温馨提示：可以通过Finalshell可视化上传证书密钥 也可以通过lrzsz处理1.通过lrzsz上传，输入rz后可多个文件同时上传 install lrzsz123sudo -iyum -y install lrzszrz 2.通过lrzsz上传，输入sz下载文件 1sz + 文件名（不是文件夹名） 安装Xray服务温馨提示：老版本和新版本选其中一种方法安装即可。推荐新版本。Install & Upgrade Xray-core and .dat files1.老版本（备用） 1bash","link":"/2021/02/04/VLESS%20Xray%E6%90%AD%E5%BB%BA%E6%9C%80%E6%96%B0%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"},{"title":"VLESS-H2C-TLS-Caddy2配置","text":"Finalshell SSH连接工具下载Mobaxterm SSH连接工具下载 v2fly官方网站 博主搭建环境：1.谷歌云centos7 64系统 2.域名一个 目前仅 caddy2 的 v2.2.0-rc.1 版及以后完美支持 v2ray 的 H2C,实现 H2(HTTP/2)应用。 caddy安装centos7123yum install yum-plugin-copryum copr enable @caddy/caddyyum install caddy centos81234dnf install 'dnf-command(copr)'dnf copr enable @caddy/caddydnf install caddy Debian123zypper addrepo 'https://copr.fedorainfracloud.org/coprs/g/caddy/caddy/repo/opensuse-tumbleweed/group_caddy-caddy-opensuse-tumbleweed.repo'zypper refreshzypper install --allow-vendor-change caddy Ubuntu123zypper addrepo 'https://copr.fedorainfracloud.org/coprs/g/caddy/caddy/repo/opensuse-tumbleweed/group_caddy-caddy-opensuse-tumbleweed.repo'zypper refreshzypper install --allow-vendor-change caddy curl1curl -OL \"https://github.com/caddyserver/caddy/releases/latest/download/ASSET\" wget1wget \"https://github.com/caddyserver/caddy/releases/latest/download/ASSET\" docker1docker pull caddy macOS1brew install caddy openSUSE Leap 15.11234zypper addrepo 'https://copr.fedorainfracloud.org/coprs/g/caddy/caddy/repo/opensuse-leap-15.1/group_caddy-caddy-opensuse-leap-15.1.repo'zypper refreshzypper install --allow-vendor-change caddy openSUSE Leap 15.2123zypper addrepo 'https://copr.fedorainfracloud.org/coprs/g/caddy/caddy/repo/opensuse-leap-15.1/group_caddy-caddy-opensuse-leap-15.2.repo'zypper refreshzypper install --allow-vendor-change caddy openSUSE Tumbleweed123zypper addrepo 'https://copr.fedorainfracloud.org/coprs/g/caddy/caddy/repo/opensuse-tumbleweed/group_caddy-caddy-opensuse-tumbleweed.repo'zypper refreshzypper install --allow-vendor-change caddy 查看版本1caddy version 取消1systemctl unmask --now caddy 创建Caddy服务器和你站点的主目录/var/www/comebey.com创建主目录/var/www 12sudo mkdir -p /var/www/comebey.comsudo chown -R caddy:caddy /var/www 创建ssl目录123sudo mkdir /etc/ssl/caddysudo chown -R caddy:root /etc/ssl/caddysudo chmod 0770 /etc/ssl/caddy 创建文件夹指定证书和证书存放绝对路径地址，可以自定义。如/etc/v2ray下放置密钥和证书 生成证书如果你已经有其他证书可忽略，把证书和密钥放到服务器指定目录下。申请证书方法太多可通过安装acme.sh工具生成证书或其他方法生成证书，可Google搜索。 1.安装acem.sh证书生成工具，以下提供3种方法安装，选其中任意一种方法安装证书工具 (温馨提示：自动升级acme.sh在root下输入 acme.sh upgrade) /root/.acme.sh1234567curl https://get.acme.sh | sh // 如提示安装失败 请先安装curl 输入 yum -y install curlwget -O - https://get.acme.sh | sh //如提示安装失败请（先安装wget）输入 yum -y install wget 已经安装了忽略git clone https://github.com/acmesh-official/acme.sh.git // 如提示安装失败 先安装git 已经安装了的忽略 输入 yum install gitcd ./acme.sh./acme.sh --install 通过以上代码安装acme.sh提示红色抱错 你可以按实际相关情况而定安装依赖 比如安装socat 或者 netcat 1234567centos7 yum install socat #通过80端口生成证书的依赖centos7 yum isntall netcat debian apt-get install openssl cron socat curldebian apt-get -y install netcat 安装成功后执行 source ~/.bashrc #以确保脚本所设置的命令别名生效 2.生成证书 路径为/root/.acme.sh文件下 安装好后可自行查看温馨提示：通过acme.sh生成证书有多种方法：例如—自动DNS API集成 如：cloudflare DNS API 令牌 和 使用全局API密钥 acme.sh支持大多数dns生成证书例如—使用DNS手动模式，等多种其他安装方法，如果你是个好学的人可Google 生成证书如下：本期视频只用指定端口 生成证书 推荐使用443端口生成证书 （一般用单域名足以，毕竟是翻墙用无需搞那么多花里胡哨的多域，比如：主域baidu.com那么不建议使用 www.baidu.com 因为是翻墙的前端web请自定义比如tw.baidu.com,前缀tw可以自定义请不要写太长，主域baidu.com和二级 www.baidu.com 可以备用你懂的 ） 通过侦听80端口申请证书，如果80端口被占用,请使用443端口,请确保这些端口都打开了 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone -k ec-256 如果您80在反向代理或负载均衡器后面使用非标准端口，则可以–httpport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone --httpport 端口 侦听443端口以颁发证书，请确保443端口开启 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn -k ec-256 如果您443在反向代理或负载均衡器后面使用非标准端口，则可以–tlsport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn --tlsport 端口 -k表示密钥长度，后面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，带有 ec 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书 温馨提示：如何80或者443端口被占用导致我们无法申请密钥和证书，我们可以通过kill封杀端口在重新申请。 12345678netstat -tlnp|grep 80或者netstat -tlnp|grep 443然后kill 1103（这个1103是进程端口id）如果终止不了，可以强制终止kill -9 1103 证书和密钥到指定路径/etc/v2ray123ecc 迁移 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/ssl/caddy/v2ray.crt --keypath /etc/ssl/caddy/v2ray.key --eccrsa 迁移 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/ssl/caddy/v2ray.crt --keypath /etc/ssl/caddy/v2ray.key 將 /etc/v2ray/v2ray.key（路径可自定义） 修改為 644 权限 1chmod 644 /etc/v2ray/v2ray.key 配置Caddyfile/etc/caddy/Caddyfile1234567891011vim /etc/caddy/Caddyfilewww.!@##.com { root */var/www/www.!@!@.com/html #other reverse_proxy /path 127.0.0.1:123456 { transport http { versions h2c } }} caddy调试12345678sudo systemctl daemon-reloadsudo systemctl enable caddysudo systemctl start caddysystemctl status caddyjournalctl -u caddysudo systemctl reload caddysudo systemctl stop caddy 安裝和更新V2Ray1bash","link":"/2020/11/07/VLESS-H2C-Caddy2%E9%85%8D%E7%BD%AE/"},{"title":"github笔记","text":"如何将一个本地项目推到github上 github配置推送初始化本地仓库1git init 添加所有文件该命令效果等同于 git add -A 1git add . git commit -m ‘提交说明’ (git commit -m \"提交说明\"或者git commit -m'提交说明2') 将修改后的文件提交到本地仓库，如：git commit -m ‘项目创建’123git commit -m \"update new json\"git commit -m'update new json' #选一种方法 连接到远程仓库连接到远程仓库，并将代码同步到远程仓库 1git remote add origin https://github.com/ComeBey/v2rayconfig.git 把本地仓库的变化连接到远程仓库主分支1git pull origin master 创建一个 upStream （上传流），并将本地代码通过这个 upStream 推送到 别名为 origin 的仓库中的 master 分支上1git push -u origin master -u ，就是创建 upStream 上传流，如果没有这个上传流就无法将代码推送到 github；同时，这个 upStream 只需要在初次推送代码的时候创建，以后就不用创建了,到此执行完毕，查看分支提交状态确认是否提交完整. 查看是否成功1git status 如果遇到：`Updates were rejected because the remote contains work that you do的问题 执行git push -u origin master 前 执行git pull origin master 如果遇到Updates were rejected because the tip of your current branch is behind即:自己当前版本低于远程仓库版本 执行 git push -u origin master -f` Git创建新分支并提交到github可以先查看一下当前所在分支1git branch 创建本地dev分支并切换到新创建的分支1git checkout -b dev 已经创建成功了，可以看一下 git branch 将新创建的分支信息推送到github1git push origin HEAD -u 切换分支如提示错误：可重新 git add . 1git checkout master 仅仅只是创建新的分支是不会被计入Contribution的","link":"/2020/12/30/github%E7%AC%94%E8%AE%B0/"},{"title":"hexo部署命令报错","text":"1234567891011121314151617INFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...fatal: Unable to create '/drives/c/blog/.deploy_git/.git/index.lock': File exists.Another git process seems to be running in this repository, e.g.an editor opened by 'git commit'. Please make sure all processesare terminated then try again. If it still fails, a git processmay have crashed in this repository earlier:remove the file manually to continue.FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlError: Spawn failed at ChildProcess. (C:\\blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21) at ChildProcess.emit (events.js:310:20) at ChildProcess.cp.emit (C:\\blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29) at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12) 解决方案fixed： 12delete .deploy_git directory：$ rm -rf .deploy_git #deletere-deploy：$ hexo d -g #重新部署","link":"/2020/06/09/hexo%E6%97%B6%E9%83%A8%E7%BD%B2%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%8F%91%E7%94%9F%E9%94%99%E8%AF%AF/"},{"title":"V2ray+WS+TCP+TLS配置","text":"v2ray+WS+TCP+TLS 安全级别不错 稳定性不错 推荐部署 centos7系统配置和Debian系统配置，acme.sh脚本所有证书将每60天自动更新一次（如果你非要手动更新随意) 第一步.V2RAY官方脚本搭建centos7更新服务器 yum update -y (部分系统提示__NO packages marked for update__则无需更新)设置硬件时钟调整为与本地时钟一致, 设置时区为上海 date -R 是查看服务器当前时间 123date -Rtimedatectl set-local-rtc 1timedatectl set-timezone Asia/Shanghai Debian系统同步时间如下： 123date -Rrm -rf /etc/localtimecp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 第二步.安装bbr1#centos7 复制这条代码安装bbr加速如下: yum -y install wgetwget “","link":"/2020/06/10/v2ray+WS+TCP+TLS%E9%85%8D%E7%BD%AE/"},{"title":"v2ray TCP原生配置","text":"Linux 安装脚本V2Ray 提供了一个在 Linux 中的自动化安装脚本。这个脚本会自动检测有没有安装过 V2Ray，如果没有，则进行完整的安装和配置；如果之前安装过 V2Ray，则只更新 V2Ray 二进制程序而不更新配置。 以下指令假设已在 su 环境下，如果不是，请先运行 sudo su。 运行下面的指令下载并安装 V2Ray。当 yum 或 apt-get 可用的情况下，此脚本会自动安装 unzip 和 daemon。这两个组件是安装 V2Ray 的必要组件。如果你使用的系统不支持 yum 或 apt-get，请自行安装 unzip 和 daemon 安装v2ray官方代码(老版本代码)12sudo -ibash","link":"/2020/06/10/v2ray-TCP%E5%8E%9F%E7%94%9F%E9%85%8D%E7%BD%AE/"},{"title":"v2ray mkcp原生搭建","text":"1.更新服务器1yum update -y #温馨提示：更新大概几分钟请耐心等待 设置硬件时钟调整为与本地时钟一致，同步上海时间 12timedatectl set-local-rtc 1timedatectl set-timezone Asia/Shanghai 2.安装v2ray官方代码（老版本代码）1bash","link":"/2020/06/07/v2ray-mkcp%E5%8E%9F%E7%94%9F%E6%90%AD%E5%BB%BA/"},{"title":"v2ray官方新老脚本安装","text":"下载 V2Ray Github Release: github.com/v2ray/v2ray-core Github 分流: github.com/v2ray/dist Homebrew: github.com/v2ray/homebrew-v2ray Arch Linux: packages/community/x86_64/v2ray Snapcraft: snapcraft.io/v2ray-core 原安装脚本已被弃置，由 fhs-install-v2ray替换。 老版本安装1bash","link":"/2020/07/26/v2ray%E5%AE%98%E6%96%B9%E6%96%B0%E8%80%81%E8%84%9A%E6%9C%AC%E5%AE%89%E8%A3%85/"},{"title":"","text":"Trojan15%V2ay90% v2ray vmess多层加密太安全换socks，trojan立正，站好了！！！你真的懂v2ray吗？ 之前在电报和大家讨论过trojan和v2ray！所以我今天写篇文章！博主用v2ray多年，可以很负责任告诉大家说v2ray是目前加密最安全的，多层加密，被人说成不安全过时了？简直是扯淡！在这里不管你用什么FQ服务我们都尊重，但是真的觉得某些UP很无知,误人子弟误导很多人。目前v2ray被v2fly项目接管也公测了vless效果显著！及其他重要更新…！！那么今天我为什么要写这篇博文呢？是因为我要告诉部分新手,v2ray可以秒掉目前主流FQ服务。Trojan被吹爆了！因为v2ray属于全能型，目前在YouTube能把V2ray真正讲清楚的真的没几个UP。因为v2ray相对其他服务配置复杂，但是功能超强。为了更好地隐藏流量的特征，v2ray+tls+ws+nginx孕育而出，TLS是一层加密，vmess也是一层加密。但vmess协议是需要要比较大的计算量。而Trojan的蛋生就是在这方面改进来的，就它是直接tls加密，所以就要快一点。 那么是不是v2ray真的就无法和trojan对比呢？NO今天我们就来聊下socks！socks协议肯定比vmess协议计算量小，如：ss，ssr，boork最终是socks5协议给我们连接，网络游戏都要通过socks5，所以这不可能计算量太大的。socks也没有那么多的加密，SOCKS其实是一种网络代理协议。SOCKS代理又分为SOCKS4和SOCKS5，二者不同的是SOCKS4代理只支持TCP协议（即传输控制协议），而SOCKS5代理则既支持TCP协议又支持UDP协议（即用户数据包协议），还支持各种身份验证机制、服务器端域名解析等。SOCK4能做到的SOCKS5都可得到，但SOCKS5能够做到的SOCK4则不一定能做到！也不用像vmess那样有基于时间的计算。但是我知道socks协议用来打游戏肯定是没问题的。SOCKS和一般的应用层代理服务器完全不同。一般的应用层代理服务器工作在应用层，并且针对不用的网络应用提供不同的处理方法，比如HTTP、SMTP等，一旦有新的网络应用出现时，应用层代理服务器就不能提供对该应用的代理，因此应用层代理服务器的可扩展性并不好；与应用层代理服务器不同的是，SOCKS代理服务器旨在提供一种广义S代理工作再线路层（即应用层和传输层之间）！所以今天我们聊下v2ray+tls+ws+nginx!配置成功后将 v2ray(不要vmess或者vless协议)+tls+ws+nginx！速度肯定不会让你们失望！大家都用过ss或ssr都清楚！！！ v2ray服务端/usr/local/etc/v2ray1234567891011121314151617181920212223{ \"inbounds\": [{ \"port\": 端口, \"listen\": \"127.0.0.1\", \"protocol\": \"socks\",\"sniffing\":{ \"enabled\": true, \"destOverride\": [\"http\", \"tls\"]},\"settings\":{ \"auth\": \"noauth\", \"udp\": false, \"userLevel\": 10},\"streamSettings\":{\"network\":\"ws\",\"wsSettings\":{\"path\":\"/comebey520\"}} }], \"outbounds\": [{ \"protocol\": \"freedom\", \"settings\": {} }]} v2ray客户端配置123456789101112131415161718192021222324252627282930313233{ \"inbounds\": [{ \"port\": 1080, //v2ray 默认10808 SOCKS5端口实际情况填写 \"protocol\": \"socks\", \"sniffing\": { \"enabled\": true, \"destOverride\": [\"http\", \"tls\"] }, \"settings\": { \"auth\": \"noauth\", \"udp\": false } }], \"outbounds\": [{ \"protocol\": \"socks\", \"settings\":{ \"servers\": [{ \"address\": \"你的域名\", \"port\": 443 }]}, \"streamSettings\": { \"network\": \"ws\", \"security\": \"tls\", \"wsSettings\": { \"path\": \"/comebey520\" //保持服务器和客户端一样 } } }]} Nginx配置/etc/nginx/nginx.conf12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events { worker_connections 1024;}http { log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf;server { listen 80; server_name 域名; rewrite ^/(.*) https://域名$1 permanent; #填写自己域名} server #关键代码 { # SSL configuration listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; ssl_certificate /路径/*.pem; #你的ssl证书*.crt 或者 *.pem都可以 ssl_certificate_key /路径/*.key; #你的ssl key ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5; #套件RSA和ecc不一样在下面我会分别给出 ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; root /usr/share/nginx/html; #网页路径，这里也可以放你们自己的html网站替换下就可以了 server_name 域名; #你的服务器域名 location /ray { #/ray 切记路径需要和v2ray服务器端和客户端保持一致 可自定义名字 proxy_redirect off; proxy_pass http://127.0.0.1:端口; #此IP地址和端口需要和v2ray服务器端配置保持一致， proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $http_host;}}} 温馨提示请某些YouTube UP拷贝本站所有代码文章注明出处！请尊重版权尊重劳动成果！","link":"/2020/09/05/v2ray%E5%8A%A0%E5%AF%86%E5%A4%9A%E6%AC%A1%EF%BC%8C%E6%8D%A2socks%E5%8D%8F%E8%AE%AE%E9%A3%9E%E4%B8%8A%E5%A4%A9/"},{"title":"v2ray下载安装","text":"v2ray主要特征 多入口多出口: 一个 V2Ray 进程可并发支持多个入站和出站协议，每个协议可独立工作。 可定制化路由: 入站流量可按配置由不同的出口发出。轻松实现按区域或按域名分流，以达到最优的网络性能。 多协议支持: V2Ray 可同时开启多个协议支持，包括 Socks、HTTP、Shadowsocks、VMess 等。每个协议可单独设置– 传输载 体，比如 TCP、mKCP、WebSocket 等。 隐蔽性: V2Ray 的节点可以伪装成正常的网站（HTTPS），将其流量与正常的网页流量混淆，以避开第三方干扰。 反向代理: 通用的反向代理支持，可实现内网穿透功能。 多平台支持: 原生支持所有常见平台，如 Windows、Mac OS、Linux，并已有第三方支持移动平台 v2ray在以下平台中可使用 Windows 7 及之后版本（x86 / amd64）； Mac OS X 10.10 Yosemite 及之后版本（amd64）； Linux 2.6.23 及之后版本（x86 / amd64 / arm / arm64 / mips64 / mips）；包括但不限于 Debian 7 / 8、Ubuntu 12.04 / 14.04 及后续版本、CentOS 6 / 7、Arch Linux； FreeBSD (x86 / amd64)； OpenBSD (x86 / amd64)； Dragonfly BSD (amd64)； IOS/安卓/软路由等 下载 v2ray Github Release: github.com/v2ray/v2ray-core Github 分流: github.com/v2ray/dist Homebrew: github.com/v2ray/homebrew-v2ray Arch Linux: packages/community/x86_64/v2ray Snapcraft: snapcraft.io/v2ray-core 压缩包均为 zip 格式，找到对应平台的压缩包，下载解压即可使用。 验证安装包 V2Ray 提供两种验证方式： 安装包 zip 文件的 SHA1 / SHA256 摘要，在每个安装包对应的.dgst文件中可以找到。 可运行程序（v2ray 或 v2ray.exe）的 gpg 签名，文件位于安装包中的 v2ray.sig 或 v2ray.exe.sig。签名公钥可以在代码库中找到。 Windows 和 Mac OS 安装方式 通过上述方式下载的压缩包，解压之后可看到 v2ray 或 v2ray.exe。直接运行即可。 Linux 发行版仓库 部分发行版可能已收录 V2Ray 到其官方维护和支持的软件仓库/软件源中。 出于兼容性、适配性考虑，您可以考虑选用由您发行版开发团队维护的软件包或下文的安装脚本亦或基于已发布的二进制文件或源代 码安装。 Linux 安装脚本 V2Ray 提供了一个在 Linux 中的自动化安装脚本。这个脚本会自动检测有没有安装过 V2Ray，如果没有，则进行完整的安装和配 置；如果之前安装过 V2Ray，则只更新 V2Ray 二进制程序而不更新配置。 以下指令假设已在 su 环境下，如果不是，请先运行 sudo su。 运行下面的指令下载并安装 V2Ray。当 yum 或 apt-get 可用的情况下，此脚本会自动安装 unzip 和 daemon。 这两个组件是安 装 V2Ray 的必要组件。如果你使用的系统不支持 yum 或 apt-get，请自行安装 unzip 和 daemon 老版本已经失效请使用v2fly项目搭建v2ray 1bash","link":"/2020/06/09/v2ray%E5%AE%98%E6%96%B9%E8%84%9A%E6%9C%AC%E9%85%8D%E7%BD%AE/"},{"title":"v2ray定时重启服务crontab","text":"1.服务器同步本地时间以下centos7同步时间选择其中一种方法一.校准时间同步本地时间 date -R 查看vps时间 1234sudo -i #root权限yum -y install ntp ntpdate #安装ntpdate工具ntpdate cn.pool.ntp.org #设置系统时间与本地网络时间同步hwclock --systohc #将系统时间写入硬件时间 方法二.校准时间同步 date -R 查看vps时间 123456yum install ntp //安装ntp服务systemctl enable ntpd //开机启动服务systemctl start ntpd //启动服务timedatectl set-timezone Asia/Shanghai //更改时区timedatectl set-ntp yes //启用ntp同步ntpq -p //同步时间 方法三.校准时间同步上海时间时区 date -R 查看vps时间 1234date -R //查看服务器时间timedatectl set-local-rtc 1timedatectl set-timezone Asia/Shanghaidate -R //查看服务器时间 Debian系统同步时间如下： 1234date -R //查看服务器时间rm -rf /etc/localtimecp /usr/share/zoneinfo/Asia/Shanghai /etc/localtimedate -R //查看服务器时间 2.crontab服务1.开启crontab,如果提示错误需要安装crontab,则输入代码无任何提示表示已经开启 1/sbin/service crond start 2.输入提示绿色返回值证明已经安装并且开启 1/sbin/service crond status #输入提示绿色返回值证明已经安装并且开启 3.安装crontab：(有些系统没有安装crontab则需要安装,如果系统本身已经安装了请跳过这一步骤) 1yum install crontabs #安装crontab 服务操作说明：12345/sbin/service crond start #启动服务/sbin/service crond stop #关闭服务/sbin/service crond restart #重启服务/sbin/service crond reload #重新载入配置/sbin/service crond status #查看crond是否正常运行 1vim /etc/v2ray/config.json #进入配置文件信息 123456789101112131415161718192021222324252627{ \"log\": { \"loglevel\": \"warning\", //可用info和debug和error和warning和none等5种模式 \"access\": \"/var/log/v2ray/access.log\", // 这是路径 \"error\": \"/var/log/v2ray/error.log\" // 这是路径 }, \"inbounds\": [ { \"port\": 16823, //端口自定义 \"protocol\": \"vmess\", \"settings\": { \"clients\": [ { \"id\": \"b831381d-6324-4d53-ad4f-8cda48b30811\", //uuid自定义 \"alterId\": 64 //额外ID自定义 } ] } } ], \"outbounds\": [ { \"protocol\": \"freedom\", \"settings\": {} } ]} 5.crontab -e输入i键,复制以下代码ctrl+c,黏贴ctrl+v然后输入shift+:在输入wq保存并且退出加入计划任务,可自定义添加需要的功能 12345*/1 * * * * date >> ~/a.log 2>&1*/1 * * * * sudo journalctl -b -u v2ray >> ~/a.log 2>&1*/1 * * * * cat /var/log/v2ray/access.log >> ~/c.log 2>&1*/1 * * * * cat /var/log/v2ray/error.log >> ~/b.log 2>&1*/1 * * * * /bin/systemctl restart v2ray.service >> ~/a.log 2>&1 以上脚本可自行编写多功能脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141crontab -l #查看已经添加的crontab任务tail或者(cat) ~/a.log或者~/b.log #查看最近10条日志more /root/a.log或者/b.log #查看所有日志tail -f /var/log/cron #查看正常运行的crontab计划任务#验证crontab计划任务v2ray运行状态#可以根据特定字段过滤输出journalctl -b #显示本次启动后的所有日志：journalctl -f #查看正在输出的进程sudo journalctl -b -u v2ray #查看brook状态man 1 journalctl #查看所有 journalctl使用方法rm -rf ~/a.log 或者~/b.log #日志清除方法#实例1：每1分钟执行一次command命令：* * * * * command 实例2：每小时的第3和第15分钟执行命令：3,15 * * * * command #实例3：在上午8点到11点的第3和第15分钟执行命令：3,15 8-11 * * * command #实例4：每隔两天的上午8点到11点的第3和第15分钟执行命令：3,15 8-11 */2 * * command #实例5：每个星期一的上午8点到11点的第3和第15分钟执行命令：3,15 8-11 * * 1 command #实例6：每晚的21:30重启smb 命令：30 21 * * * /etc/init.d/smb restart #实例7：每月1、10、22日的4 : 45重启smb 命令：45 4 1,10,22 * * /etc/init.d/smb restart #实例8：每周六、周日的1 : 10重启smb命令：10 1 * * 6,0 /etc/init.d/smb restart #实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb 命令：0,30 18-23 * * * /etc/init.d/smb restart #实例10：每星期六的晚上11 : 00 pm重启smb 命令：0 23 * * 6 /etc/init.d/smb restart #实例11：每一小时重启smb 命令：* */1 * * * /etc/init.d/smb restart #实例12：晚上11点到早上7点之间，每隔一小时重启smb 命令：* 23-7/1 * * * /etc/init.d/smb restart #实例13：每月的4号与每周一到周三的11点重启smb 命令：0 11 4 * mon-wed /etc/init.d/smb restart 实例14：一月一号的4点重启smb 命令：0 4 1 jan * /etc/init.d/smb restart #实例14：每小时执行/etc/cron.hourly目录内的脚本命令：01 * * * * root run-parts /etc/cron.hourly","link":"/2020/06/16/v2ray%E5%AE%9A%E6%97%B6%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1crontab/"},{"title":"v2ray新版本配置TLS","text":"Finalshell SSH连接工具下载Mobaxterm SSH连接工具下载 1.服务器时间同步设置硬件时钟调整为与本地时钟一致, 设置时区为上海 date -R 是查看服务器当前时间centos7时间同步 123date -Rtimedatectl set-local-rtc 1timedatectl set-timezone Asia/Shanghai Debian系统同步时间如下： 123date -Rrm -rf /etc/localtimecp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime debian安装依赖 12apt updateapt install curl centos7安装依赖 12yum makecacheyum install curl 2.安装dat和release.sh12curl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.shcurl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh 3.安装和更新V2Ray1bash install-release.sh 安装v2ray输入如下内容最近v2fly维护版本拉取最新数据输出如下内容 \" + \" 代表目前输出内容，\" - \"代表在老版本基础上删除的信息 每行代码 \" + \" ，\" - \"号忽略123456789101112131415161718192021222324+info: unzip is installed.+info: Extract the V2Ray package to /tmp/tmp.RS0y2YR2ZS/ and prepare it for installation.+installed: /usr/local/bin/v2ray+installed: /usr/local/bin/v2ctl+installed: /usr/local/lib/v2ray/geoip.dat+installed: /usr/local/lib/v2ray/geosite.dat+installed: /usr/local/etc/v2ray/config.json-installed: /usr/local/etc/v2ray/00_log.json-installed: /usr/local/etc/v2ray/01_api.json-installed: /usr/local/etc/v2ray/02_dns.json-installed: /usr/local/etc/v2ray/03_routing.json-installed: /usr/local/etc/v2ray/04_policy.json-installed: /usr/local/etc/v2ray/05_inbounds.json-installed: /usr/local/etc/v2ray/06_outbounds.json-installed: /usr/local/etc/v2ray/07_transport.json-installed: /usr/local/etc/v2ray/08_stats.json-installed: /usr/local/etc/v2ray/09_reverse.json-installed: /var/log/v2ray/+installed: /var/log/v2ray/access.log+installed: /var/log/v2ray/error.log+installed: /etc/systemd/system/v2ray.service+installed: /etc/systemd/system/v2ray@.service+removed: /tmp/tmp.KojGXm19Pa/+info: V2Ray v4.27.0 is installed. 4.安裝最新發行的geoip.dat和geosite.dat1bash install-dat-release.sh 5.创建和编辑配置文件1cd /usr/local/etc/v2ray 在/usr/local/etc/v2ray下面创建一个新的config.json配置文件复制以下代码到config.json /usr/local/etc/v2ray12345678910111213141516171819202122232425262728293031323334{ \"inbounds\": [ { \"port\": 443, // 建议使用 443 端口 \"protocol\": \"vmess\", \"settings\": { \"clients\": [ { \"id\": \"23ad6b10-8d1ae3e35cd38297\", //UUID \"alterId\": 64 //额外id } ] }, \"streamSettings\": { \"network\": \"tcp\", //协议自己替换比如WS \"security\": \"tls\", // security 要设置为 tls 才会启用 TLS \"tlsSettings\": { \"certificates\": [ { \"certificateFile\": \"/etc/v2ray/v2ray.crt\", // 证书文件 \"keyFile\": \"/etc/v2ray/v2ray.key\" // 密钥文件 } ] } } } ], \"outbounds\": [ { \"protocol\": \"freedom\", \"settings\": {} } ]} v2ray调试 12sudo systemctl restart v2raysudo systemctl status -l v2ray 设置v2ray开机启动 1systemctl enable v2ray 6.生成证书如果你已经有其他证书可忽略，把证书和密钥放到服务器指定目录下。申请证书方法太多可通过安装acme.sh工具生成证书或其他方法生成证书，可Google搜索。 1.安装acem.sh证书生成工具，以下提供3种方法安装，选其中任意一种方法安装证书工具 (温馨提示：自动升级acme.sh在root下输入 acme.sh upgrade) /root/.acme.sh1234567curl https://get.acme.sh | sh // 如提示安装失败 请先安装curl 输入 yum -y install curlwget -O - https://get.acme.sh | sh //如提示安装失败请（先安装wget）输入 yum -y install wget 已经安装了忽略git clone https://github.com/acmesh-official/acme.sh.git // 如提示安装失败 先安装git 已经安装了的忽略 输入 yum install gitcd ./acme.sh./acme.sh --install 通过以上代码安装acme.sh提示红色抱错 你可以按实际相关情况而定安装依赖 比如安装socat 或者 netcat 1234567centos7 yum install socat #通过80端口生成证书的依赖centos7 yum isntall netcatdebian apt-get install openssl cron socat curldebian apt-get -y install netcat安装成功后执行 source ~/.bashrc #以确保脚本所设置的命令别名生效 2.生成证书 路径为/root/.acme.sh文件下 安装好后可自行查看 温馨提示：通过acme.sh生成证书有多种方法： 例如—自动DNS API集成 如：cloudflare DNS API 令牌 和 使用全局API密钥 acme.sh支持大多数dns生成证书 例如—使用DNS手动模式，等多种其他安装方法，如果你是个好学的人可Google 生成证书如下：本期视频只用指定端口 生成证书 推荐使用443端口生成证书 （一般用单域名足以，毕竟是翻墙用无需搞那么多花里胡哨的多域，比如：主域baidu.com那么不建议使用 www.baidu.com 因为是翻墙的前端web请自定义比如tw.baidu.com,前缀tw可以自定义请不要写太长，主域baidu.com和二级 www.baidu.com 可以备用你懂的 ） 1.通过侦听80端口申请证书，如果80端口被占用,请使用443端口,请确保这些端口都打开了 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone -k ec-256 2.如果您80在反向代理或负载均衡器后面使用非标准端口，则可以–httpport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone --httpport 端口 3.侦听443端口以颁发证书，请确保443端口开启 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn -k ec-256 4.如果您443在反向代理或负载均衡器后面使用非标准端口，则可以–tlsport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn --tlsport 端口 -k 表示密钥长度，后面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，带有 ec 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书 温馨提示：如何80或者443端口被占用导致我们无法申请密钥和证书，我们可以通过kill封杀端口在重新申请。 12345678netstat -tlnp|grep 80或者netstat -tlnp|grep 443然后kill 1103（这个1103是进程端口id）如果终止不了，可以强制终止kill -9 1103 7.证书和密钥安装到指定路径/etc/v2ray （路径可自定义） 123ecc 安装代码 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --eccrsa 安装代码 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key 將 /etc/v2ray/v2ray.key 修改為 644 权限 1chmod 644 /etc/v2ray/v2ray.key 8.BBr安装1wget \"https://raw.githubusercontent.com/ComeBey/rootfw-bbr/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh 9.查询tls开启状态https://www.ssllabs.com/ssltest/index.html 输入自己域名查询即可关于config.json配置文件可以自己写，当然也包括其他各种负载均衡，反向代理。如果想短时间内提升自己的可以参加我的培训课。 10.如果想卸载V2Ray执行下面代码1bash install-release.sh --remove 添加电报群","link":"/2020/07/28/v2ray%E6%96%B0%E7%89%88%E6%9C%ACWS+TLS/"},{"title":"v2ray流量中转","text":"当我们在科学上网的过程中，有时候因为服务器到你本地延迟太高会影响我们使用，当服务器端所有配置满足需求的情况下（当然也包括线路问题），延迟太高绝对会引起病发直接会导致数据传输和影响访问速率，比如：网速非常卡，频繁掉包，那我们该如何降低延迟呢？如何改善呢?我们可以通过中转流量解决这个问题。服务器中转方法很多，今天我们通过v2ray来配置个非常简单的中转 温馨提示：今天我只讨论单纯中转，不讨论服务器线路 我画了个拓扑图简单说明下：1.假设当PC访问SERVER B时延迟为60ms+80ms=140ms或者更高的延迟，且SERVER B是中上配置服务器，大流量G口。假设不是高峰期延迟在140以上140~560/ms之间，即使你服务器配置不错，大流量G口，因为延迟太高如果vps线路本身不是优化好的线路，病发可能性极高容易掉包。一旦频繁掉包会直接影响正常访问数据和网速 2.假设当PC通过SERVER A 中转服务器延迟在30ms，这台服务器配置不好，在通过中转服务器访问被中转服务器（最终访问外网节点服务器，假设这台服务器配置不错）SERVER B 在35ms延迟，一共65ms，对比上面140ms-65ms=75ms 降低了75ms延迟，这样的中转才有意义，在配合BBR内核优化效果是非常非常明显 Dokodemo door是一个传入数据协议，它可以监听端口，进入此端口的数据发送到指定服务器的端口，从而达到端口映射的效果及流量转发。 本地环境vultr服务器centos7 一台（当然你也可以使用其他版本服务器）点击这个链接注册后通过支付宝支付最低消费10美金=70左右人民币，即可得到赠送（100美金有效期30天使用）充值的10美金想什么时候用都可以 点击注册https://www.vultr.com/?ref=8623585 电信网络100兆，PC电脑离路由器距离30米左右，隔两面墙壁 WiFi使用5G频段传输实际测试 vultr 我选择日本地区最低配置5美金一个月那个，延迟在200~230左右甚至更高分时间段，一分钟内掉包非常非常频繁（我只说大概的） 安装v2ray当然你也可以使用新版本v2ray脚本或者其他翻墙服务安装，自行谷歌搜索，本脚本是老版本v2ray,安装完毕后请自行配置相关config.json参数，并且保证配置成功后能顺利访问外网。安装v2ray官方脚本 1bash","link":"/2020/07/06/v2ray%E6%B5%81%E9%87%8F%E4%B8%AD%E8%BD%AC/"},{"title":"新版V2ray+WS+TLS+Nginx","text":"同步vps时间和电脑时间centos7更新服务器 yum update -y (部分系统提示__NO packages marked for update__则无需更新)设置硬件时钟调整为与本地时钟一致, 设置时区为上海 date -R 是查看服务器当前时间 123date -Rtimedatectl set-local-rtc 1timedatectl set-timezone Asia/Shanghai Debian123date -Rrm -rf /etc/localtimecp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 安装依赖debian安装依赖 12apt updateapt install curl centos7安装依赖 12yum makecacheyum install curl 安装完后执行下面代码12curl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.shcurl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh 安装和更新V2Ray1bash install-release.sh 文件内容输出最近v2fly维护版本拉取最新数据输出如下内容 \" + \" 代表目前输出内容，\" - \"代表在老版本基础上删除的信息温馨提示：不同版本输出内容都不一样，请按实际情况为例。 每行代码 \" + \" ，\" - \" 号忽略123456789101112131415161718192021222324+info: unzip is installed.+info: Extract the V2Ray package to /tmp/tmp.RS0y2YR2ZS/ and prepare it for installation.+installed: /usr/local/bin/v2ray+installed: /usr/local/bin/v2ctl+installed: /usr/local/lib/v2ray/geoip.dat+installed: /usr/local/lib/v2ray/geosite.dat+installed: /usr/local/etc/v2ray/config.json-installed: /usr/local/etc/v2ray/00_log.json-installed: /usr/local/etc/v2ray/01_api.json-installed: /usr/local/etc/v2ray/02_dns.json-installed: /usr/local/etc/v2ray/03_routing.json-installed: /usr/local/etc/v2ray/04_policy.json-installed: /usr/local/etc/v2ray/05_inbounds.json-installed: /usr/local/etc/v2ray/06_outbounds.json-installed: /usr/local/etc/v2ray/07_transport.json-installed: /usr/local/etc/v2ray/08_stats.json-installed: /usr/local/etc/v2ray/09_reverse.json-installed: /var/log/v2ray/+installed: /var/log/v2ray/access.log+installed: /var/log/v2ray/error.log+installed: /etc/systemd/system/v2ray.service+installed: /etc/systemd/system/v2ray@.service+removed: /tmp/tmp.KojGXm19Pa/+info: V2Ray v4.27.0 is installed. 安裝最新發行的geoip.dat和geosite.dat1bash install-dat-release.sh 创建编辑配置文件1cd /usr/local/etc/v2ray 在/usr/local/etc/v2ray下面创建一个名为config.json配置文件复制以下代码到config.json 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//复制以下代码{ \"log\" : { \"access\": \"/var/log/v2ray/access.log\", \"error\": \"/var/log/v2ray/error.log\", \"loglevel\": \"warning\" }, \"inbound\": { \"port\": 9000, //重点(此端口与nginx配置保持一致) \"listen\": \"127.0.0.1\", //重点(此端口与nginx配置保持一致) \"protocol\": \"vmess\", \"settings\": { \"clients\": [ { \"id\": \"eb950add-608e-409d-937f-e797324387093z\", //你的UUID，可更改需与客户端保持一致 \"level\": 1, \"alterId\": 64 //此ID也需与客户端保持一致（不要设置超过100以上可自定义） } ] }, \"streamSettings\":{ \"network\": \"ws\", //可设置tcp等 \"wsSettings\": { \"path\": \"/ray\" //与nginx配置相关（可自定义） } } }, \"outbound\": { \"protocol\": \"freedom\", \"settings\": {} }, \"outboundDetour\": [ { \"protocol\": \"blackhole\", \"settings\": {}, \"tag\": \"blocked\" } ], \"routing\": { \"strategy\": \"rules\", \"settings\": { \"rules\": [ { \"type\": \"field\", \"ip\": [ \"0.0.0.0/8\", \"10.0.0.0/8\", \"100.64.0.0/10\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.2.0/24\", \"192.168.0.0/16\", \"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"::1/128\", \"fc00::/7\", \"fe80::/10\" ], \"outboundTag\": \"blocked\" } ] } }} v2ray调试 12sudo systemctl restart v2raysudo systemctl status -l v2ray 设置v2ray开机启动 1systemctl enable v2ray 打开 80（HTTP）和 443（HTTPS）端口(如果看过我前几期视频，确定防火墙规则设置好了，谷歌云可以忽略。其他品牌服务器请确认已经开启了80和443端口如果没有可尝试下面代码操作或者服务器网页端开启http80端口和https 443端口) 也可以通过下面的命令来打开这两个端口:请自行开启防火墙开机启动 123sudo firewall-cmd --permanent --zone=public --add-service=httpsudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload 安装NGINX123456789#安装 EPEL 仓库（谷歌云忽略此步骤，如果你是使用其他品牌vps服务器如果没有安装EPEL请先安装）sudo yum install epel-release#安装 Nginx 【 yum remove nginx 如果想删除nginx卸载命令 】sudo yum install nginxsudo systemctl enable nginx.service #设置开机启动Nginxsudo systemctl start nginx.service #启动Nginx服务 1234567891011121314151617181920调试代码如下：sudo systemctl start nginx.service //开启 Nginxsudo systemctl stop nginx.service //停止 Nginxsudo systemctl status -l nginx.service //查看 Nginx运行状态sudo systemctl restart nginx.service //重新启动 Nginxsudo systemctl disable nginx.service //取消开机启动 Nginxsudo systemctl reload nginx.service //重载Nginx (如更改Nginx配置需要重新载入数据)sudo systemctl enable nginx.service //开机启动 调试代码如下： Nginx调试也可以不需要代码后面添加 **.service** 请先**sudo systemctl start nginx.service**和**sudo systemctl enable nginx.service** 然后在通过下面代码也可以调试.sudo systemctl start nginx //开启 Nginxsudo systemctl stop nginx //停止 Nginxsudo systemctl status -l nginx //查看 Nginx运行状态sudo systemctl restart nginx //重新启动 Nginxsudo systemctl disable nginx //取消开机启动 Nginxsudo systemctl reload nginx //重载Nginx (如更改Nginx配置需要重新载入数据)sudo systemctl enable nginx //开机启动 通过以上方式安装的 Nginx，所有相关的配置文件都在 /etc/nginx/ 目录中Nginx 的主配置文件是 /etc/nginx/nginx.confNginx 日志文件（access.log 和 error.log ）位于 /var/log/nginx/ 目录中。 如果在设置完成之后不能成功使用，可能是由于 SElinux 机制(如果你是 CentOS 7 的用户请特别留意SElinux 这一机制)阻止了 Nginx 转发向内网的数据如果是这样的话，在V2Ray的日志里不会有访问信息，在 Nginx 的日志里会出现大量的 “Permission Denied” 字段要解决这一问题需要在终端下键入以下命令： 1setsebool -P httpd_can_network_connect 1 //非常重要debian忽略 验证 Nginx 是否成功启动，可以在浏览器中打开 http://YOUR_IP 注意：打开则显示centos网页 但是提示不安全网站没开启ssl加密https 生成证书如果你已经有其他证书可忽略，把证书和密钥放到服务器指定目录下，只需在Nginx 中指定 证书和密钥路径。申请证书方法太多可通过安装acme.sh工具生成证书或其他方法生成证书，可Google搜索。 1.安装acem.sh证书生成工具，以下提供3种方法安装，选其中任意一种方法安装证书工具 (温馨提示：自动升级acme.sh在root下输入 acme.sh upgrade) 1234567curl https://get.acme.sh | sh // 如提示安装失败 请先安装curl 输入 yum -y install curlwget -O - https://get.acme.sh | sh //如提示安装失败请（先安装wget）输入 yum -y install wget 已经安装了忽略git clone https://github.com/acmesh-official/acme.sh.git // 如提示安装失败 先安装git 已经安装了的忽略 输入 yum install gitcd ./acme.sh./acme.sh --install 通过以上代码安装acme.sh提示红色抱错 你可以按实际相关情况而定安装依赖 比如安装socat 或者 netcat 12345678centos7 yum install openssl #安装依赖centos7 yum install socat #通过80端口生成证书的依赖centos7 yum install netcatdebian apt-get install openssl cron socat curl #通过80端口生成证书的依赖和openssldebian apt-get -y install netcat安装成功后执行 source ~/.bashrc 以确保脚本所设置的命令别名生效 2.生成证书 路径为/root/.acme.sh文件下 安装好后可自行查看 温馨提示：通过acme.sh生成证书有多种方法： 例如—自动DNS API集成 如：cloudflare DNS API 令牌 和 使用全局API密钥 acme.sh支持大多数dns生成证书 例如—使用DNS手动模式，等多种其他安装方法，如果你是个好学的人可Google 生成证书如下：本期视频只用指定端口 生成证书 **推荐使用443端口生成证书**（一般用单域名足以，毕竟是翻墙用无需搞那么多花里胡哨的多域，比如：主域baidu.com那么不建议使用www.baidu.com,因为是翻墙的前端web请自定义比如tw.baidu.com,前缀tw可以自定义请控制三个字符，主域baidu.com和二级www.baidu.com可以备用你懂的） 1.通过侦听80端口申请证书，如果80端口被占用,请使用443端口,请确保这些端口都打开了 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone -k ec-256 2.如果您80在反向代理或负载均衡器后面使用非标准端口，则可以–httpport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone --httpport 端口 3.侦听443端口以颁发证书，请确保443端口开启 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn -k ec-256 4.如果您443在反向代理或负载均衡器后面使用非标准端口，则可以–tlsport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn --tlsport 端口 -k 表示密钥长度，后面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，带有 ec 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书 证书和密钥安装到指定路径1/etc/v2ray （路径可自定义） 123ecc 安装代码 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --eccrsa 安装代码 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key 配置NGINX *.confvi /etc/nginx/nginx.conf #进入编辑配置文件：长按键盘上D键删除所有配置信息，再按键盘Ins键进入编辑模式复制如下代码黏贴到配置中编辑，填写对应自己的配置信息后。最后同时按键盘上 shift+: 键，在输入wq保存退出 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events { worker_connections 1024;}http { log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf;server { listen 80; server_name 域名; rewrite ^/(.*) https://域名$1 permanent; #填写自己域名} server #关键代码 { # SSL configuration listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; ssl_certificate /路径/*.pem; #你的ssl证书*.crt 或者 *.pem都可以 ssl_certificate_key /路径/*.key; #你的ssl key ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5; #套件RSA和ecc不一样在下面我会分别给出 ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; root /usr/share/nginx/html; #网页路径，这里也可以放你们自己的html网站替换下就可以了 server_name 域名; #你的服务器域名 location /ray { #/ray 切记路径需要和v2ray服务器端和客户端保持一致 可自定义名字 proxy_redirect off; proxy_pass http://127.0.0.1:端口; #此IP地址和端口需要和v2ray服务器端配置保持一致， proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $http_host;}}} 套件如下： 1ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384; #RSA套件 1EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5; #Ecc套件 修改 Nginx 配置后，请务必重新加载配置 输入 sudo systemctl reload nginx.service #必须这样操作 最后请输入reboot重启服务器（记得执行） 1reboot 查询是否开启ssl 打开网站https://myssl.com/ssl.html输入自己域名，端口输入443 或者 打开https://www.ssllabs.com/ssltest/index.html 查询 ，也可以google搜索关键字ssl查询，很多网站可以查询，评分是否到达A级别 温馨提示：通过acme.sh工具生成证书请使用443端口 代码如下：sudo ~/.acme.sh/acme.sh –issue -d 域名 –alpn -k ec-256 （侦听443端口以颁发证书，请确保443端口开启 按文章流程操作80端口生成证书时会提示端口占用，当然如果你想简单点可以通过已有购买的证书或者通过宝塔申请的或者其他证书，把密钥和证书直接复制拷贝到服务器指定路径下，在配置nginx指向证书和路径。部分免费证书会缺少CA证书那么在网站ssl评分就会大打折扣，解决办法是重新把CA证书添加下就可以了 通过在浏览器输入自己域名查询是否发现网站加了一把锁🔒开启了https， 且网站域名ssl评分到达A 如果是，恭喜你搭建成功.如果你已经学会了那么接下来的课程会越来越有意思. BBr安装1wget \"https://raw.githubusercontent.com/ComeBey/rootfw-bbr/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh 如果想卸载V2Ray执行下面代码1bash install-release.sh --remove 查询tls开启状态https://www.ssllabs.com/ssltest/index.html 输入自己域名查询即可 温馨提示：如果想短时间内提升自己的可以参加我的培训，多年实战沉淀精品课程，vIP课程基本上所有平台找不到，一阵见血帮你打通任督二脉，人人都可以是专家。点击课程详情添加公开电报群Nginx前端模板下载","link":"/2020/07/28/%E6%96%B0%E7%89%88V2ray+WebSocket+TLS+Nginx/"},{"title":"一台电脑配置两个hexo","text":"本文主要配置当本身PC电脑有配置一个GitHub账号和hexo绑定情况下，如何实现2个GitHub账号对应2hexo或者多个推送到GitHub仓库部署。这也是因为前几天有个粉丝问到我，很多新手朋友不知道如何配置，希望本篇文章能帮助到大家。 查看密钥路径方法一1.首先我们打开终端输入ls ~/.ssh/可以查看当前PC已有的密钥，显示id_rsa 与 id_rsa_pub说明已经有一对密钥2.输入cat ~/.ssh可查看.ssh路径(当然我们也可以通过其他方法查看.ssh路径) 方法二123cd ~/.ssh/pwd 生成新公钥温馨提示：cd ~/.ssh到.ssh根目录下，ssh-add -D清空本地的 SSH 缓存，一般情况忽略即可，必要时候使用生成新的公钥，并命名为 id_rsa_comebey (温馨提示：保证与之前密钥文件名称不同即可）执行以下代码一直按回车键即可 1ssh-keygen -t rsa -f ~/.ssh/id_rsa_comebey -C \"yourmail@xxx.com\" 输入代码ls ~/.ssh显示PC安装好的名为id_rsa_comebey和 id_rsa_comebey.pub申请好的id_rsa_comebey.pub打开后复制里面内容黏贴到新GitHub仓库地址中settings——————Deploy keys————Add deploy key黏贴其中即可 配置config创建config文件温馨提示：你可以进入~/.ssh路径下鼠标右击创建config文件，下面的本代码是通过纯代码创建。 12cd ~/.ssh #进入.ssh目录touch config #创建config配置文件 编辑config1.方法一 12345678910#one 默认账号Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa #密钥路径#two 新账号 Host rootfw.github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa_comebey #密钥路径 2.方法二 123cd ~/.sshvi config 输入i键,复杂以下代码黏贴，按键盘Esc键，同时按shift+：组合键，输入wd保存即可 12345678910#one 默认账号Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa #密钥路径#two 新账号 Host rootfw.github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa_comebey #密钥路径 验证配置12ssh -T git@github.comssh -T git@rootfw.github.com 返回信息则配置成功 1Hi $%^$^%^$ You've successfully authenticated, but GitHub does not provide shell access. 设置用户名/邮箱取消全局模式用户名/邮箱配置，单独设置用户名/邮箱（如果您已经设置了全局的话） 123git config --global --unset user.namegit config --global --unset user.email 分别进入两个Hexo目录\\deploy_git.git .git下执行命令单独设置用户名/邮箱 12git config user.name \"用户名\"git config user.email \"邮箱\" 如果此时报错：fatal: not in a git directory，说明你没有进入.git目录下，具体路径：C:\\rootfw\\.deploy_git\\.git，.git目录是隐藏的，需要你设置隐藏目录可见 验证查看配置 1git config --list 成功部署执行hexo g -d","link":"/2021/02/08/%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE%E4%B8%A4%E4%B8%AAhexo%E5%8F%8Agithub/"},{"title":"暗网数据","text":"一、查看防火墙状态firewalld的基本使用systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体启动： 1systemctl start firewalld 查看： 1systemctl status firewalld 停止： 1systemctl disable firewalld 禁用： 1systemctl stop firewalld 服务：/sbin/chkconfig –add foo 把新生成的foo.service 放到/usr/lib/systemd/system/下面，然后采用load命令导入 systemctl load foo.service启动一个服务： 1systemctl start firewalld.service 关闭一个服务： 1systemctl stop firewalld.service 重启一个服务： 1systemctl restart firewalld.service 显示一个服务的状态： 1systemctl status firewalld.service 在开机时启用一个服务： 1systemctl enable firewalld.service 一般需要重启一下机器，不然后面做的设置可能不会生效 二、开放或限制端口1、开放端口如我们需要开启Shell连接时需要使用的22端口 1firewall-cmd --zone=public --add-port=22/tcp --permanent 其中–permanent的作用是使设置永久生效，不加的话机器重启之后失效 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 可通过如下命令查看是否生效 1firewall-cmd --zone=public --query-port=22/tcp 如下命令可查看当前系统打开的所有端口 1firewall-cmd --zone=public --list-ports 三、限制端口比如我们现在需要关掉刚刚打开的22端口 1firewall-cmd --zone=public --remove-port=22/tcp --permanent 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 再去查看系统所有开放的端口，已经看到没有22端口了 1firewall-cmd --zone=public --list-ports 四、批量开放或限制端口批量开放端口，如从100到500这之间的端口我们全部要打开 1firewall-cmd --zone=public --add-port=100-500/tcp --permanent 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 查看系统所有开放的端口，可以看到从100到500的端口已被全部开放 1firewall-cmd --zone=public --list-ports 同理，批量限制端口为 12firewall-cmd --zone=public --remove-port=100-500/tcp --permanentfirewall-cmd --reload 五、开放或限制IP1.限制IP地址访问比如限制IP为192.168.0.200的地址禁止访问80端口即禁止访问机器 1firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.200\" port protocol=\"tcp\" port=\"80\" reject\" 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 查看已经设置的规则 1firewall-cmd --zone=public --list-rich-rules 2.解除IP地址限制解除刚才被限制的192.168.0.200 1firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.200\" port protocol=\"tcp\" port=\"80\" accept\" 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 再查看规则设置发现已经没有192.168.0.200的限制了 1firewall-cmd --zone=public --list-rich-rules 如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可 1vi /etc/firewalld/zones/public.xml 3.限制IP地址段如我们需要限制10.0.0.0-10.0.0.255这一整个段的IP，禁止他们访问 1firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"10.0.0.0/24\" port protocol=\"tcp\" port=\"80\" reject\" 其中10.0.0.0/24表示为从10.0.0.0这个IP开始，24代表子网掩码为255.255.255.0，共包含256个地址，即从0-255共256个IP，即正好限制了这一整段的IP地址，具体的设置规则可参考下表 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 查看规则，确认是否生效 1firewall-cmd --zone=public --list-rich-rules 同理，打开限制为 12firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"10.0.0.0/24\" port protocol=\"tcp\" port=\"80\" accept\"firewall-cmd --reload","link":"/2020/06/08/%E6%9A%97%E7%BD%91%E6%95%B0%E6%8D%AE/"},{"title":"加密库","text":"1.安装宝塔面板2.安装ioncube 3. 首先在宝塔的首页，添加一个新的网站，域名那些如实填写即可； 然后我们将已经下载好的免费WHMCS v7.42上传到刚刚创建的网站文件目录，并解压； 然后在该网站的文件根目录内找到文件“configuration.php.new”，并将它的后缀“.new”删除掉，最后变成了一个正常的PHP文件“configuration.php”； 打开 http://域名/install 开始安装WHMCS，第一步是一堆协议，直接“I AGREE”，然后进入第二步 QQ截图20181017155143_副本.jpg 第二步是检测系统是否可行。“当然是可以啦！”，直接点击“Begin Installation”开始安装； 第三步是填写whmcs的激活码和数据库信息，大家按照下图填写即可。填写完成之后，点击“ Continue ? ”继续； QQ截图20181017155607_副本.jpg 然后，就是设置whmcs的管理员邮箱、邮箱密码等等信息(下图)，写完以后，点击“Complete Setup ?”即可开始安装！耐心等待WHMCS安装完成！ 安装完成以后，我们将下面的cron任务添加到宝塔Web面板即可完成Whmcs的安装（下图） f8061540030649_副本.jpg 详细设置为：复制下方的corn脚本,打开宝塔Web面板，左侧的“计划任务”，按（下图）的设置即可！ 7dc41540030968_副本.jpg 最后，将whmcs安装目录“install”删除，就可以了！","link":"/2020/06/29/%E5%8A%A0%E5%AF%86%E5%BA%93/"},{"title":"服务器之间延迟测试qperf","text":"在科学上网服务器流量中转中如V2ray、SSR、SS、Brook等其他翻墙服务，中转的优势自己可以Google，一般机场用地比较多，和特殊需求的墙友，在YouTube包括其他博客网页大部分都没有详细说清除过这个问题，YouTube基本上所有的UP主都没有讲到核心的问题，可以说大部分都是在瞎中转，比如大部分都是用一键中转脚本，安全性自己衡量，除非你自己会写一键脚本，在此之前没有做服务器之间延迟和网络上下行测试及路由回路和线路追踪分析等测试，因为考虑到每个品牌商服务器线路优化不一样，这里讲其中一个，极为重要甚至要不要中转流量，决定能否最大发挥中转效果的前提就是测服务器与服务器之间延迟测试，如果连中转服务器和被中转服务器之间延迟都不知道，请问你中转个毛？认真理解，本章主要讲解两台服务器之间的网络性能延迟测试（当然你也可以多台中转测试）。主要用来测试ip之间网络TCP/UDP的带宽和延迟及性能测试。除支持TCP/UDP协议外，还支持更多其他的，如DRAM传输、SDP 可进行循环遍历测试等待！（请尊重原创转载请注明出处） 我简单画了个拓扑图，以上图片简单说明在没有部署任何服务之前，当PC端访问SERVER B 延迟220ms左右，PC端访问中转SERVER A 30ms左右，中转SERVER A 访问被中转SERVER B 35ms，由此可见30ms+35ms=65ms, 220ms-65ms=155ms这样的中转才有意义。成功中转后你会惊喜。如果PC访问SERVER A和SERVER B的总延迟约等于或超过PC访问SERVER B的延迟，那中转没有任何意义。本文就是教你找到延迟最低，最适合你网络环境的中转服务器。 安装 qper1yum -y install qperf 温馨提示：本期只讲qper工具测延迟，当然也有其他测试工具,安装的方法很多种，我只讲简单的方法，请自行设置允许19765端口（qperf默认端口），或者你防火墙规则可以允许所有端口，测试完毕后在重新在加入其他防火墙规则或端口。没有允许19765端口测试无法进行 服务器设置拿一台VPS做qper服务端 在firewalld上，一旦qperf建立连接，它将创建一个控制端口和数据端口，默认数据端口为19765，当然你可以使用自定义端口，但我这里设置启用一个数据端口 1234567891011121314151617181920[root@rootfw.com ~]# firewall-cmd --permanent --add-port=19765/tcp --add-port=19766/tcpsuccess[root@rootfw.com ~]# firewall-cmd --reloadsuccess[root@rootfw.com ~]#firewall-cmd --list-allpublic (active) target: default icmp-block-inversion: no interfaces: enp0s25 sources: services: ssh dhcpv6-client http https ports: 19765/tcp 19766/tcp protocols: masquerade: no forward-ports: source-ports: icmp-blocks: rich rules: 也可以查看端口是否监听正常： 1234netstat -ntlpornetstat -tunlp |grep qperf 服务端后台挂起运行或不挂起运行 123qperf &orqperf 使用自定义端口并在后台运行： 1qperf –listen_port 90 & 客户端设置拿另一台VPS做qper客户端 123qperf tcp_lat tcp_bw conforqperf -ip 19766 tcp_lat tcp_bw conf 输出： 12345678910111213tcp_lat: latency = 25 ms #延迟tcp_bw: bw = 120.2 MB/secconf: loc_node = test loc_cpu = Intel Xeon @ 2.00GHz loc_os = Linux 3.10.0-1127.13.1.el7.x86_64 loc_qperf = 0.4.9 rem_node = vultr.guest rem_cpu = Intel Core (Skylake, IBRS) 3.8GHz rem_os = Linux 4.11.8-1.el7.elrepo.x86_64 rem_qperf = 0.4.9 案例在这些示例中，我们首先在服务器模式下通过不带参数调用qperf在名为myserver的节点上运行它。在所有随后的示例中，我们在另一个节点上运行qperf并连接到假定主机名为myserver的服务器。要运行TCP带宽和延迟测试：qperf myserver tcp_bw tcp_lat要运行SDP带宽测试10秒钟，请执行以下操作：qperf myserver -t 10 sdp_bw要运行UDP延迟测试，然后使服务器终止：qperf myserver udp_lat退出要测量RDMA UD延迟和带宽：qperf myserver ud_lat ud_bw要测量RDMA UC双向带宽：qperf myserver rc_bi_bw获取消息大小从1到64K的一系列TCP延迟qperf myserver -oo msg_size：1：64K：* 2 -vu tcp_lat Options-ar, –access_recv OnOffIf OnOff is non-zero, data is accessed once received. Otherwise, data is ignored. By default, OnOff is 0. This can help to mimic some applications.-ar1Cause received data to be accessed.-ap, –alt_port PortSet alternate path port. This enables automatic path failover.-lap, –loc_alt_port PortSet local alternate path port. This enables automatic path failover.-rap, –rem_alt_port PortSet remote alternate path port. This enables automatic path failover.-ca, –cpu_affinity PNSet cpu affinity to PN. CPUs are numbered sequentially from 0. If PN is “any”, any cpu is allowed otherwise the cpu is limited to the one specified.-lca, –loc_cpu_affinity PNSet local processor affinity to PN.-rca, –rem_cpu_affinity PNSet remote processor affinity to PN.-f, –flip OnOffIf non-zero, cause sender and receiver to play opposite roles.-f1Cause sender and receiver to play opposite roles.-h, –help TopicPrint out information about Topic. To see the list of topics, type qperf –help-H, –host HostRun test between the current node and the qperf running on node Host. This can also be specified as the first non-option argument.-i, –id Device:PortUse RDMA Device and Port.-li, –loc_id Device:PortUse local RDMA Device and Port.-ri, –rem_id Device:PortUse remote RDMA Device and Port.-lp, –listen_port PortSet the port we listen on to ListenPort. This must be set to the same port on both the server and client machines. The default value is 19765.-oo, –loop Var:Init:Last:IncrRun a test multiple times sequencing through a series of values. Var is the loop variable; Init is the initial value; Last is the value it must not exceed and Incr is the increment. It is useful to set the –verbose_used (-vu) option in conjunction with this option.-m, –msg_size SizeSet the message size to Size. The default value varies by test. It is assumed that the value is specified in bytes however, a trailing kib or K, mib or M, or gib or G indicates that the size is being specified in kibibytes, mebibytes or gibibytes respectively while a trailing kb or k, mb or m, or gb or g indicates kilobytes, megabytes or gigabytes respectively.-mt, –mtu_size SizeSet the MTU size. Only relevant to the RDMA UC/RC tests. Units are specified in the same manner as the –msg_size option.-n, –no_msgs NSet test duration by number of messages sent instead of time.-cp, –cq_poll OnOffTurn polling mode on or off. This is only relevant to the RDMA tests and determines whether they poll or wait on the completion queues. If OnOff is 0, they wait; otherwise they poll.-lcp, –loc_cq_poll OnOffLocally turn polling mode on or off.-rcp, –rem_cq_poll OnOffRemotely turn polling mode on or off.-cp1Turn polling mode on.-lcp1Turn local polling mode on.-rcp1Turn remote polling mode on.-ip, –ip_port PortUse Port to run the socket tests. This is different from –listen_port which is used for synchronization. This is only relevant for the socket tests and refers to the TCP/UDP/SDP/RDS/SCTP port that the test is run on.-e, –precision DigitsSet the number of significant digits that are used to report results.-nr, –rd_atomic MaxSet the number of in-flight operations that can be handled for a RDMA read or atomic operation to Max. This is only relevant to the RDMA Read and Atomic tests.-lnr, –loc_rd_atomic MaxSet local read/atomic count.-rnr, –rem_rd_atomic MaxSet remote read/atomic count.-sl, –service_level SLSet RDMA service level to SL. This is only used by the RDMA tests. The service level must be between 0 and 15. The default service level is 0.-lsl, –loc_service_level SLSet local service level.-rsl, –rem_service_level SLSet remote service level.-sb, –sock_buf_size SizeSet the socket buffer size. This is only relevant to the socket tests.-lsb, –loc_sock_buf_size SizeSet local socket buffer size.-rsb, –rem_sock_buf_size SizeSet remote socket buffer size.-sp, –src_path_bits NSet source path bits. If the LMC is not zero, this will cause the connection to use a LID with the low order LMC bits set to N.-lsp, –loc_src_path_bits NSet local source path bits.-rsp, –rem_src_path_bits NSet remote source path bits.-sr, –static_rate RateForce InfiniBand static rate. Rate can be one of: 2.5, 5, 10, 20, 30, 40, 60, 80, 120, 1xSDR (2.5 Gbps), 1xDDR (5 Gbps), 1xQDR (10 Gbps), 4xSDR (2.5 Gbps), 4xDDR (5 Gbps), 4xQDR (10 Gbps), 8xSDR (2.5 Gbps), 8xDDR (5 Gbps), 8xQDR (10 Gbps).-lsr, –loc_static_rateForce local InfiniBand static rate-rsr, –rem_static_rateForce remote InfiniBand static rate-t, –time TimeSet test duration to Time. Specified in seconds however a trailing m, h or d indicates that the time is specified in minutes, hours or days respectively.-to, –timeout TimeSet timeout to Time. This is the timeout used for various things such as exchanging messages. The default is 5 seconds.-lto, –loc_timeout TimeSet local timeout to Time. This may be used on the server to set the timeout when initially exchanging data with each client. However, as soon as we receive the client’s parameters, the client’s remote timeout will override this parameter.-rto, –rem_timeout TimeSet remote timeout to Time.-un, –unify_nodesUnify the nodes. Describe them in terms of local and remote rather than send and receive.-uu, –unify_unitsUnify the units that results are shown in. Uses the lowest common denominator. Helpful for scripts.-ub, –use_bits_per_secUse bits/sec rather than bytes/sec when displaying networking speed.-cm, –use_cm OnOffUse the RDMA Connection Manager (CM) if OnOff is non-zero. It is necessary to use the CM for iWARP devices. The default is to establish the connection without using the CM. This only works for the tests that use the RC transport.-cm1Use RDMA Connection Manager.-v, –verboseProvide more detailed output. Turns on -vc, -vs, -vt and -vu.-vc, –verbose_confProvide information on configuration.-vs, –verbose_statProvide information on statistics.-vt, –verbose_timeProvide information on timing.-vu, –verbose_usedProvide information on parameters used.-vv, –verbose_moreProvide even more detailed output. Turns on -vvc, -vvs, -vvt and -vvu.-vvc, –verbose_more_confProvide more information on configuration.-vvs, –verbose_more_statProvide more information on statistics.-vvt, –verbose_more_timeProvide more information on timing.-vvu, –verbose_more_usedProvide more information on parameters used.-V, –versionThe current version of qperf is printed.-ws, –wait_server TimeIf the server is not ready, continue to try connecting for Time seconds before giving up. The default is 5 seconds.TestsconfShow configurationquitCause the server to quitrds_bwRDS streaming one way bandwidthrds_latRDS one way latencysctp_bwSCTP streaming one way bandwidthsctp_latSCTP one way latencysdp_bwSDP streaming one way bandwidthsdp_latSDP one way latencytcp_bwTCP streaming one way bandwidthtcp_latTCP one way latencyudp_bwUDP streaming one way bandwidthudp_latUDP one way latencyrc_bi_bwRC streaming two way bandwidthrc_bwRC streaming one way bandwidthrc_latRC one way latencyuc_bi_bwUC streaming two way bandwidthuc_bwUC streaming one way bandwidthuc_latUC one way latencyud_bi_bwUD streaming two way bandwidthud_bwUD streaming one way bandwidthud_latUD one way latencyrc_rdma_read_bwRC RDMA read streaming one way bandwidthrc_rdma_read_latRC RDMA read one way latencyrc_rdma_write_bwRC RDMA write streaming one way bandwidthrc_rdma_write_latRC RDMA write one way latencyrc_rdma_write_poll_latRC RDMA write one way polling latencyuc_rdma_write_bwUC RDMA write streaming one way bandwidthuc_rdma_write_latUC RDMA write one way latencyuc_rdma_write_poll_latUC RDMA write one way polling latencyrc_compare_swap_mrRC compare and swap messaging raterc_fetch_add_mrRC fetch and add messaging ratever_rc_compare_swapVerify RC compare and swapver_rc_fetch_addVerify RC fetch and add","link":"/2020/07/08/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BB%B6%E8%BF%9F%E6%B5%8B%E8%AF%95qperf%E4%BD%BF%E7%94%A8/"},{"title":"Brook centos7官方脚本搭建","text":"1.更新服务器1.输入sudo -i 进来root权限, 可自行选择升级内核, yum update -y升级内核2.yum install wget 下载wget工具wget https://github.com/txthinking/brook/releases/download/v20190205/brook 下载brook服务器版本3.输入cp brook /usr/bin 把brook拷贝到bin目录下4.chmod +x /usr/bin/brook 给予当前路径brook可执行权限5.brook -h #查看帮助6.nohup ./brook server -l :80 -p pass1234 & 添加brook端口和密码且让brook在后台运行复制如下代码 1234567sudo -i yum update -yyum install wgetwget https://github.com/txthinking/brook/releases/download/v20190205/brookcp brook /usr/binchmod +x /usr/bin/brooknohup ./brook server -l :80 -p pass1234 & Brook设置随系统启动vi /etc/systemd/system/brook.service 用vi创建brook.service启动脚本 按” i “进入insert模式,输入脚本如下 123456789[Unit]Description = This is brook [Service]ExecStart = /usr/bin/./brook server -l :80 -p pass1234 [Install]WantedBy = multi-user.target 按Esc，输入”shift+:”输入wq 回车，保存并退出 赋予可执行属性并生效： 1chmod +x /etc/systemd/system/brook.service 开启brook.service 服务 1systemctl enable /etc/systemd/system/brook.service reboot 重启vps 查看brook服务是否正常运行这台如下代码： 1234service brook status -l 如果正常启动会返回绿色 active (running)service brook start 开启brook服务service brook stop 停止brook运行service brook restart 重启brook服务 systemctl list-unit-files 查看brook脚本是否生效 当重新修改brook密码后 我们需重载信息输入systemctl daemon-reload 或者重新启动vps 输入reboot","link":"/2020/06/10/Brook%E5%AE%98%E6%96%B9%E8%84%9A%E6%9C%AC%E6%90%AD%E5%BB%BA/"},{"title":"设置服务器登陆密码","text":"centos7拿到root权限后，修改SSH配置文件/etc/ssh/sshd_config 123vim /etc/ssh/sshd_configPasswordAuthentication no 改成 yesPermitRootLogin no 改成 yes 设置密码,输入两次，输入不提示任何字符 1passwd 重启SSH服务，最后通过账号为root，密码为自己刚设置的通过第三方ssh登陆连接 1service sshd restart Debian 9和10 1234apt-get install ssh #选择安装vim /etc/ssh/sshd_config#PermitRootLogin prohibit-password 改为 PermitRootLogin yes#PasswordAuthentication no 改为 PasswordAuthentication yes 设置密码,输入两次，输入不提示任何字符 1passwd 重启SSH服务，最后通过账号为root，密码为自己刚设置的通过第三方ssh登陆连接 1sudo /etc/init.d/ssh restart","link":"/2020/07/26/%E6%9B%B4%E6%94%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%99%BB%E9%99%86%E5%AF%86%E7%A0%81/"},{"title":"VIP培训课程","text":"精品课程开课了：欢迎报名，多年实战沉淀跨平台，梯子源码解剖·一键脚本如何写·多服务器中转·匿名IP·linux实战·跨平台实战一针见血开启您的学术世界。本课程内容不在任何平台公开教学，同学们快来吧！感谢大家的支持，原频道Hasan W已经删除不在更新视频，新频道大家可以在YouTube自己搜索关键字comebey 或者点击关注 课程目录开门见山多年实战横跨多平台沉淀，前后端，大数据等等！曾走过数不清的弯路，开发过主流某知名源码架构。因为某些核心点网络上基本学不到，必须不断实践总结的经验，那绝对不是任何平台能轻易学到的知识点。如果你真想学点有用的知识，方可报名。 初级公开课程1.所有目前主流FQ开源部署，源码基础分析2.各种服务器初级流量中转开源部署3.各种机场模板介绍及基本部署4.各种前端后端等等及习惯网络知识 所有视频我会上传YouTube，从最基础的学起，涵盖所有目前YouTube主流各类FQ原生部署方法，各种网站及博客部署等等网络知识，大家想学什么，可以给我提建议或者意见。包括一些基础的实操。我不想和大家灌输太多没用的理论，我也不想像其他UP主说相声一样，真正实操起来懂的真的没几个懂。youtube讲FQ的圈不大。YouTube缺少真正能把翻墙代码讲清楚讲透的人。从来不缺视频内容搬运，和二次创新。随便找个别人写的博客内容，拼拼凑凑。就开始录视频。最起码的版权是什么都不知道，一个不懂尊重原创作者的up不值得尊重！甚至很多朋友看了其他某些UP讲的视频来问我，说实话我感到很悲哀，如果他们解决不要你的问题，为什么要执着去学他们方法？因为有些视频内容就有误导性。但是反而大家就是喜欢看热闹。并不是点击高的视频内容一定优质，好的视频内容，建立在原创的基础，视频内容发布出来是能马上能解决你问题的，一针见血当然这和个人学习能力也有一定关系。那么在这初级阶段，我讲的每一期视频，只要你用心学习，哪怕多看几遍。我保证很快你能学以致用，且融会贯通。当然大家请支持原创视频。 中级收费课程1.主流FQ原生部署中级培训，深入分析源码及功能实现，及相关理论知识。如果基础的理论知识不清楚，就输在起跑线了。有些朋友FQ好几年一直搞不懂为什么pc或者手机FQ那么卡那么慢，特别在高峰期基本无法使用。甚至看了太多错误的教学，分不清楚核心点！2.服务器中转核心知识点，服务器及多服务器延迟测试及基础知识点。相信我中转并不是那么的简单，当特殊人群需要特殊服务器做跳板去特殊地方匿名IP会开启你学术之旅。3.因为特殊原因其他培训内容均不在博客中详细简介 课程针对真正想学知识，尊重知识的人，主要是大家遇到各种问题以后自己就能解决，培养自己有这种能力。大部分遇到的问题我都会让你自己亲手学会。linux系统各个版本从基础代码学起，结合到各种FQ服务，看懂核心代码真正的含义及基础功能添加，优化自己独一无二脚本。只有看懂了代码，自己知道如何优化，基本上你再去搭建任何翻墙服务是非常轻松的。费用366为期一年，每天一块钱。可直接查看博客原创加密文章及及海量视频教学。 高级收费课程主要针对想通过这个行业想变现盈利的朋友，各种FQ脚本深入优化，记住是深入优化，或二次开发。如何写自己的一键脚本。外贸公司中大型穿墙网络代码部署，外网访问各种功能纯代码配置等。搭建机场高级进阶，各种服务器深入学习中转，机场网站前端代码优化，后端功能添加。前端web css。网站安全维护等其他核心知识要点。因为特殊原因其他培训内容均不在博客中详细简介费用3685为期一年 一对一课程针对内心有迫切学习的欲望，尊重知识尊重版权的人。远程或直播亲自教学，一个礼拜脱变之路。课程不在此公布。费用5680，添加本人私人联系方式。笨鸟先飞！一个礼拜后可进高级交流群 在一年课程中所有学员中，我会选几名悟性高的学生一起和我共同开发项目。所有报名的同学请保持互相尊重谦虚的学习态度。知识无价，请您尊重！也请您尊重原创版权！ 以上所有视频为comebey原创视频版权所有。收费课程按需求选择购买，收费课程为本人多年实战总结的金品课。 电报群讨论组 商务合作hasan.wang@foxmail.com","link":"/2020/07/22/%E9%A2%91%E9%81%93%E6%9B%B4%E6%96%B0/"},{"title":"防火墙设置","text":"一、查看防火墙状态firewalld的基本使用systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体启动： 1systemctl start firewalld 查看： 1systemctl status firewalld 停止： 1systemctl disable firewalld 禁用： 1systemctl stop firewalld 服务：/sbin/chkconfig –add foo 把新生成的foo.service 放到/usr/lib/systemd/system/下面，然后采用load命令导入 systemctl load foo.service启动一个服务： 1systemctl start firewalld.service 关闭一个服务： 1systemctl stop firewalld.service 重启一个服务： 1systemctl restart firewalld.service 显示一个服务的状态： 1systemctl status firewalld.service 在开机时启用一个服务： 1systemctl enable firewalld.service 一般需要重启一下机器，不然后面做的设置可能不会生效 二、开放或限制端口1、开放端口如我们需要开启Shell连接时需要使用的22端口 1firewall-cmd --zone=public --add-port=22/tcp --permanent 其中–permanent的作用是使设置永久生效，不加的话机器重启之后失效 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 可通过如下命令查看是否生效 1firewall-cmd --zone=public --query-port=22/tcp 如下命令可查看当前系统打开的所有端口 1firewall-cmd --zone=public --list-ports 三、限制端口比如我们现在需要关掉刚刚打开的22端口 1firewall-cmd --zone=public --remove-port=22/tcp --permanent 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 再去查看系统所有开放的端口，已经看到没有22端口了 1firewall-cmd --zone=public --list-ports 四、批量开放或限制端口批量开放端口，如从100到500这之间的端口我们全部要打开 1firewall-cmd --zone=public --add-port=100-500/tcp --permanent 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 查看系统所有开放的端口，可以看到从100到500的端口已被全部开放 1firewall-cmd --zone=public --list-ports 同理，批量限制端口为 12firewall-cmd --zone=public --remove-port=100-500/tcp --permanentfirewall-cmd --reload 五、开放或限制IP1.限制IP地址访问比如限制IP为192.168.0.200的地址禁止访问80端口即禁止访问机器 1firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.200\" port protocol=\"tcp\" port=\"80\" reject\" 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 查看已经设置的规则 1firewall-cmd --zone=public --list-rich-rules 2.解除IP地址限制解除刚才被限制的192.168.0.200 1firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"192.168.0.200\" port protocol=\"tcp\" port=\"80\" accept\" 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 再查看规则设置发现已经没有192.168.0.200的限制了 1firewall-cmd --zone=public --list-rich-rules 如设置未生效，可尝试直接编辑规则文件，删掉原来的设置规则，重新载入一下防火墙即可 1vi /etc/firewalld/zones/public.xml 3.限制IP地址段如我们需要限制10.0.0.0-10.0.0.255这一整个段的IP，禁止他们访问 1firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"10.0.0.0/24\" port protocol=\"tcp\" port=\"80\" reject\" 其中10.0.0.0/24表示为从10.0.0.0这个IP开始，24代表子网掩码为255.255.255.0，共包含256个地址，即从0-255共256个IP，即正好限制了这一整段的IP地址，具体的设置规则可参考下表 重新载入一下防火墙设置，使设置生效 1firewall-cmd --reload 查看规则，确认是否生效 1firewall-cmd --zone=public --list-rich-rules 同理，打开限制为 12firewall-cmd --permanent --add-rich-rule=\"rule family=\"ipv4\" source address=\"10.0.0.0/24\" port protocol=\"tcp\" port=\"80\" accept\"firewall-cmd --reload","link":"/2020/06/27/%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/"},{"title":"国际化优化","text":"comebey 考虑到本站国外读者需求，本站开放国际化部分文章如果出现错词还请提示站长修改，为了更好的让国外读者易于学习，朋友们可以提交英文文档或教程到Email 本站因为工作原因迟迟没有更新频道视频和blog文章，在10月1号假期将做几期视频。VIP学员在10月1号我将安排部分课程，和新版本视频培训网站上线。谢谢！最好的一定在最后面！","link":"/2020/09/20/%E9%80%9A%E7%9F%A5/"},{"title":"速率换算","text":"今天我们来看看.首先比如我们家里宽带为100兆那这个指的是什么意思？100M或者100兆，就是运营商提供的100Mbps，M 是 Mbps1Mbps=1Mb/s=1/8MB/s=1/8M/s下载速度与下行速率的数值对应关系为：极限下载速度=下行速率/8例如100M宽带,其极限下载速度为100/8=12.5兆字节/秒(Mbps)。这是理论值。一般来讲，实际下载速度在11.25Mbps以上属于正常范围。上传速度与上行速率的数值对应关系为：上传速度=极限上行速率/8 查看看YouTube视频 10000/kbps什么意思啊？1000kbps(千比特每秒)等于多少Mb/s(兆比特每秒) = 10000÷1000 = 10Mbps speedtest测试100/Mbps什么意思啊？100Mbps就是运营商提供的 比如办理100兆宽带 500兆带宽。那么 100Mbps ÷ 8 = 12.5MB/s 这是最大下载速率，不过由于种种限制,实际下载速度在11.25Mbps以上属于正常范围 VPS Download: 1000 Mbit/s 和 Upload: 1000 Mbit/s100Mbps = 100Mbit/s 100Mbps等于多少MB/s = 100÷8 = 12.5MB/s 这是最大下载速率VPS Download 通过https://www.convertworld.com/zh-hans/bandwidth 转换 数据传输率的单位一般采用MB/s或Mbit/s，尤其在内部数据传输率上官方数据中更多的采用Mbit/s为单位。此处有必要讲解一下两个单位二者之间的差异： MB/s的含义是兆字节每秒，Mbit/s的含义是兆比特每秒，前者是指每秒传输的字节数量，后者是指每秒传输的比特位数。MB/s中的B字母是Byte的含义，虽然与Mbit/s中的bit翻译一样，都是比特，也都是数据量度单位，但二者是完全不同的。Byte是字节数，bit是位数，在计算机中每八位为一字节，也就是1Byte＝8bit，是1：8的对应关系。因此1MB/s等于8Mbit/s。因此一定要注意B字母的大小写，尤其有些人还把Mbit/s简写为Mb/s，此时B字母的大小真可以称为失之毫厘，谬以千里。","link":"/2020/07/24/%E9%80%9F%E7%8E%87%E6%8D%A2%E7%AE%97/"},{"title":"V2ray vless+WebSocket+TLS+Nginx","text":"目前 VLESS 没有自带加密，请用于可靠信道，如 TLS。VLESS 处于公测阶段，测试期间请确保客户端与服务端的 v2ray-core 均为最新版本。VLESS 的内测仓库为 rprx/v2ray-vless，其中 PREVIEW 系列的新版本会在发布一段时间后并入 v2fly/v2ray-core。请大家自行把 v2ray core 客户端升级到最新版本 开门见山不管大家通过什么vps搭建，请大家自己去测试服务器到你本地延迟，包括线路，包括vps上下行。关于vps选择我不推荐任何品牌，地区不一样自己选择适合自己的。每篇文章的代码我都测试过，有些朋友搭建V2ray或者其他FQ服务说卡慢，先自己安装BBR,当然如果连基本自己服务器性能都不是非常清楚，那是不是扯蛋。知识需要积累，加油！还请大家自己实战，并且尊重知识！操作过程中有遇到问题欢迎添加公开电报群 请某些youtube UP在使用全站脚本注明出处，请尊重劳动成果 安装依赖Debian安装依赖 12apt updateapt install curl Centos7安装依赖 12yum makecacheyum install curl 安装release.sh12curl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.shcurl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh 安装和更新V2Ray1bash install-release.sh 代码输出最近v2fly维护版本拉取最新数据输出如下内容 \" + \" 代表目前输出内容，\" - \"代表在老版本基础上删除的信息 温馨提示：不同版本安装输出内容会有差异，请按实际情况为例。 每行代码 \" + \" ，\" - \" 号忽略123456789101112131415161718192021222324+info: unzip is installed.+info: Extract the V2Ray package to /tmp/tmp.RS0y2YR2ZS/ and prepare it for installation.+installed: /usr/local/bin/v2ray+installed: /usr/local/bin/v2ctl+installed: /usr/local/lib/v2ray/geoip.dat+installed: /usr/local/lib/v2ray/geosite.dat+installed: /usr/local/etc/v2ray/config.json-installed: /usr/local/etc/v2ray/00_log.json-installed: /usr/local/etc/v2ray/01_api.json-installed: /usr/local/etc/v2ray/02_dns.json-installed: /usr/local/etc/v2ray/03_routing.json-installed: /usr/local/etc/v2ray/04_policy.json-installed: /usr/local/etc/v2ray/05_inbounds.json-installed: /usr/local/etc/v2ray/06_outbounds.json-installed: /usr/local/etc/v2ray/07_transport.json-installed: /usr/local/etc/v2ray/08_stats.json-installed: /usr/local/etc/v2ray/09_reverse.json-installed: /var/log/v2ray/+installed: /var/log/v2ray/access.log+installed: /var/log/v2ray/error.log+installed: /etc/systemd/system/v2ray.service+installed: /etc/systemd/system/v2ray@.service+removed: /tmp/tmp.KojGXm19Pa/+info: V2Ray v4.27.0 is installed. 安裝更新dat1bash install-dat-release.sh 辑配置文件复制以下代码到config.json 或者使用vi /usr/local/etc/v2ray/config.json进行编辑 1.输入键盘i编辑 2.替换里面所有内容按Esc键 3.键盘组合键ctrl+shift+: 4.输入wq保存退出 /usr/local/etc/v2ray/config.json123456789101112131415161718192021222324252627282930{ \"inbounds\": [ { \"port\": 36240, \"listen\":\"127.0.0.1\", \"protocol\": \"vless\", \"settings\": { \"decryption\": \"none\", \"clients\": [ { \"id\": \"*&*&***&*&*^*&*&*&*&*&*\", \"level\": 0 } ] }, \"streamSettings\": { \"network\": \"ws\", \"wsSettings\": { \"path\": \"/abcde6\" } } } ], \"outbounds\": [ { \"protocol\": \"freedom\", \"settings\": {} } ]} v2ray调试 123sudo systemctl restart v2raysudo systemctl status -l v2raysudo systemctl daemon-reload 设置v2ray开机启动 1systemctl enable v2ray 打开 80（HTTP）和 443（HTTPS）端口(如果看过我前几期视频，确定防火墙规则设置好了，谷歌云可以忽略。其他品牌服务器请确认已经开启了80和443端口如果没有可尝试下面代码操作或者服务器网页端开启http 80端口和https 443端口) 也可以通过下面的命令来打开这两个端口:请自行开启防火墙开机启动 123sudo firewall-cmd --permanent --zone=public --add-service=httpsudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload 安装NGINX123456789#安装 EPEL 仓库（谷歌云忽略此步骤，如果你是使用其他品牌vps服务器如果没有安装EPEL请先安装）sudo yum install epel-release#安装 Nginx 【 yum remove nginx 如果想删除nginx卸载命令 】sudo yum install nginxsudo systemctl enable nginx.service #设置开机启动Nginxsudo systemctl start nginx.service #启动Nginx服务 1234567891011121314151617181920调试代码如下：sudo systemctl start nginx.service //开启 Nginxsudo systemctl stop nginx.service //停止 Nginxsudo systemctl status -l nginx.service //查看 Nginx运行状态sudo systemctl restart nginx.service //重新启动 Nginxsudo systemctl disable nginx.service //取消开机启动 Nginxsudo systemctl reload nginx.service //重载Nginx (如更改Nginx配置需要重新载入数据)sudo systemctl enable nginx.service //开机启动 调试代码如下： Nginx调试也可以不需要代码后面添加 **.service** 请先**sudo systemctl start nginx.service**和**sudo systemctl enable nginx.service** 然后在通过下面代码也可以调试.sudo systemctl start nginx //开启 Nginxsudo systemctl stop nginx //停止 Nginxsudo systemctl status -l nginx //查看 Nginx运行状态sudo systemctl restart nginx //重新启动 Nginxsudo systemctl disable nginx //取消开机启动 Nginxsudo systemctl reload nginx //重载Nginx (如更改Nginx配置需要重新载入数据)sudo systemctl enable nginx //开机启动 通过以上方式安装的 Nginx，所有相关的配置文件都在 /etc/nginx/ 目录中Nginx 的主配置文件是 /etc/nginx/nginx.confNginx 日志文件（access.log 和 error.log ）位于 /var/log/nginx/ 目录中。 如果在设置完成之后不能成功使用，可能是由于 SElinux 机制(如果你是 CentOS 7 的用户请特别留意SElinux 这一机制)阻止了 Nginx 转发向内网的数据如果是这样的话，在V2Ray的日志里不会有访问信息，在 Nginx 的日志里会出现大量的 “Permission Denied” 字段要解决这一问题需要在终端下键入以下命令： 1setsebool -P httpd_can_network_connect 1 //非常重要debian忽略 验证 Nginx 是否成功启动，可以在浏览器中打开 http://YOUR_IP 注意：打开则显示centos网页 但是提示不安全网站没开启ssl加密https 生成证书如果你已经有其他证书可忽略，把证书和密钥放到服务器指定目录下，只需在Nginx 中指定 证书和密钥路径。申请证书方法太多可通过安装acme.sh工具生成证书或其他方法生成证书，可Google搜索。 1.安装acem.sh证书生成工具，以下提供3种方法安装，选其中任意一种方法安装证书工具 (温馨提示：自动升级acme.sh在root下输入 acme.sh upgrade) 1234567curl https://get.acme.sh | sh // 如提示安装失败 请先安装curl 输入 yum -y install curlwget -O - https://get.acme.sh | sh //如提示安装失败请（先安装wget）输入 yum -y install wget 已经安装了忽略git clone https://github.com/acmesh-official/acme.sh.git // 如提示安装失败 先安装git 已经安装了的忽略 输入 yum install gitcd ./acme.sh./acme.sh --install 通过以上代码安装acme.sh提示红色抱错 你可以按实际相关情况而定安装依赖 比如安装socat 或者 netcat(手不要那么贱，有时候不停的申请证书，申请多了会报错，有次数限制切记，建议用二级域名申请如：bac.google.com) 1234567centos7 yum install socat #通过80端口生成证书的依赖centos7 yum install netcat debian apt-get install openssl cron socat curldebian apt-get -y install netcat 安装成功后执行 source ~/.bashrc 以确保脚本所设置的命令别名生效 2.生成证书 路径为/root/.acme.sh文件下 安装好后可自行查看温馨提示：通过acme.sh生成证书有多种方法：例如—自动DNS API集成 如：cloudflare DNS API 令牌 和 使用全局API密钥 acme.sh支持大多数dns生成证书例如—使用DNS手动模式，等多种其他安装方法，如果你是个好学的人可Google 生成证书如下：本期视频只用指定端口 生成证书 **推荐使用443端口生成证书**（一般用单域名足以，毕竟是翻墙用无需搞那么多花里胡哨的多域，比如：主域baidu.com那么不建议使用 www.baidu.com, 因为是翻墙的前端web请自定义比如tw.baidu.com,前缀tw可以自定义请控制三个字符，主域baidu.com和二级 www.baidu.com 可以备用你懂的） 1.通过侦听80端口申请证书，如果80端口被占用,请使用443端口,请确保这些端口都打开了 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone -k ec-256 2.如果您80在反向代理或负载均衡器后面使用非标准端口，则可以–httpport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone --httpport 端口 3.侦听443端口以颁发证书，请确保443端口开启 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn -k ec-256 4.如果您443在反向代理或负载均衡器后面使用非标准端口，则可以–tlsport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn --tlsport 端口 -k 表示密钥长度，后面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，带有 ec 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书 移动证书密钥创建文件夹首先连接好自己服务器。需要更改root密码请访问。root权限下，指定证书和证书存放绝对路径地址，可以用Finalshell ssh连接工具可视化操作编辑，也可以通过纯代码操作，存放密钥证书路径可自定义。如/etc/ssl下放置密钥和证书.也可以通过代码执行 比如：可以cd / 到根目录， 然后在进入到cd /usr/local/etc路径下，然后创建ssl文件夹 mkdir ssl 这个SSL文件夹下面用来存放证书和密钥. /etc/ssl路径可自定义只是用于存放证书密钥 123ecc 安装代码 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/ssl/v2ray.crt --keypath /etc/ssl/v2ray.key --eccrsa 安装代码 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/ssl/v2ray.crt --keypath /etc/ssl/v2ray.key 配置NGINX *.conf温馨提示：代码注释无需删除不会影响运行，我只是方便更好理解vi /etc/nginx/nginx.conf #进入编辑配置文件：长按键盘上D键删除所有配置信息，再按键盘Ins键进入编辑模式复制如下代码黏贴到配置中编辑，填写对应自己的配置信息后。最后同时按键盘组合键 ctrl+shift+: 键，在输入wq保存退出 /etc/nginx/nginx.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events { worker_connections 1024;}http { log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf;server { listen 80; server_name 域名; rewrite ^/(.*) https://域名$1 permanent; #填写自己域名} server #关键代码 { # SSL configuration listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; ssl_certificate /路径/*.pem; #你的ssl证书*.crt 或者 *.pem都可以 ssl_certificate_key /路径/*.key; #你的ssl key ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5; #套件RSA和ecc不一样在下面我会分别给出 ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; root /usr/share/nginx/html; #网页路径，这里也可以放你们自己的html网站替换下就可以了 server_name 域名; #你的服务器域名 location /ray { #/ray 切记路径需要和v2ray服务器端和客户端保持一致 可自定义名字 proxy_redirect off; proxy_pass http://127.0.0.1:端口; #此IP地址和端口需要和v2ray服务器端配置保持一致， proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $http_host;}}} 套件如下： 1ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384; #RSA套件 1EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5; #Ecc套件 修改 Nginx 配置后，请务必重新加载配置 输入 sudo systemctl reload nginx.service #必须这样操作 最后请输入reboot重启服务器（记得执行） 1reboot 查询是否开启ssl 打开网站https://myssl.com/ssl.html输入自己域名，端口输入443 或者 打开https://www.ssllabs.com/ssltest/index.html 查询 ，也可以google搜索关键字ssl查询，很多网站可以查询，评分是否到达A级别 温馨提示：通过acme.sh工具生成证书请使用443端口 代码如下：sudo ~/.acme.sh/acme.sh –issue -d 域名 –alpn -k ec-256 （侦听443端口以颁发证书，请确保443端口开启 按文章流程操作80端口生成证书时会提示端口占用，当然如果你想简单点可以通过已有购买的证书或者通过宝塔申请的或者其他证书，把密钥和证书直接复制拷贝到服务器指定路径下，在配置nginx指向证书和路径。部分免费证书会缺少CA证书那么在网站ssl评分就会大打折扣，解决办法是重新把CA证书添加下就可以了 通过在浏览器输入自己域名查询是否发现网站加了一把锁🔒开启了https， 且网站域名ssl评分到达A 如果是，恭喜你搭建成功.如果你已经学会了那么接下来的课程会越来越有意思. BBr安装1wget \"https://raw.githubusercontent.com/ComeBey/rootfw-bbr/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh v2ray客户端客户端 v2ray core请升级到最新版本，添加自定义配置服务器，复制以下代码保存名为 **.json 1234567891011121314151617181920212223242526272829303132333435363738394041424344{\"inbounds\": [ { \"port\": 1080, \"listen\": \"127.0.0.1\", \"protocol\": \"socks\", \"sniffing\": { \"enabled\": true, \"destOverride\": [\"http\", \"tls\"] }, \"settings\": { \"auth\": \"noauth\", \"udp\": false } } ], \"outbounds\": [ { \"protocol\": \"vless\", \"settings\": { \"vnext\": [ { \"address\": \"域名\", \"port\": 443, \"users\": [ { \"encryption\": \"none\", \"id\": \"UUID自己替换\", \"level\": 0 } ] } ] }, \"streamSettings\": { \"network\": \"ws\", \"security\": \"tls\", \"wsSettings\": { \"path\": \"/abcde\" } } } ]} 查询tls开启状态https://www.ssllabs.com/ssltest/index.html 输入自己域名查询即可 如果想卸载V2Ray执行下面代码1bash install-release.sh --remove 温馨提示：如果想短时间内提升自己的可以参加我的培训，多年实战沉淀精品课程，vIP课程基本上所有平台找不到，一阵见血帮你打通任督二脉，人人都可以是专家。点击课程详情添加公开电报群 Nginx前端模板下载","link":"/2020/08/23/V2ray%20vless+WebSocket+TLS+Nginx/"},{"title":"VLESS XTLS + 回落分流终极配置","text":"这里是进阶配置的超集，利用 VLESS 强大的回落分流特性，实现了 443 端口尽可能多的协议、配置的完美共存，包括 XTLS客户端可以同时通过下列方式连接到服务器，其中 WS 都可以通过 CDN.在这里感谢v2fly团队v2fly官方网站 1.VLESS over TCP with XTLS2.VLESS over TCP with TLS3.VLESS over WS with TLS4.VMess over TCP with TLS5.VMess over WS with TLS重要提示：请把v2ray N和v2ray core更新到最新版本，新版本v2rayN已经支持VLESS Xtls Trojan直接添加v2ray N最新下载v2ray core最新下载Finalshell SSH连接工具下载Mobaxterm SSH连接工具下载 博主搭建环境：1.谷歌云centos7 64系统 2.域名一个 服务器时间同步设置硬件时钟调整为与本地时钟一致, 设置时区为上海 date -R 是查看服务器当前时间centos7时间同步 123date -Rtimedatectl set-local-rtc 1timedatectl set-timezone Asia/Shanghai Debian系统同步时间如下： 123date -Rrm -rf /etc/localtimecp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime debian安装依赖 12apt updateapt install curl centos7安装依赖 12yum makecacheyum install curl 安装dat和release.sh12curl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.shcurl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-dat-release.sh 安装和更新V2Ray1bash install-release.sh v2ray输出如下温馨提示：不同版本拉取数据输出内容不一样，请按实际情况为例最近v2fly维护版本拉取最新数据输出如下内容 \" + \" 代表目前输出内容，\" - \"代表在老版本基础上删除的信息 每行代码 \" + \" ，\" - \"号忽略123456789101112131415161718192021222324+info: unzip is installed.+info: Extract the V2Ray package to /tmp/tmp.RS0y2YR2ZS/ and prepare it for installation.+installed: /usr/local/bin/v2ray+installed: /usr/local/bin/v2ctl+installed: /usr/local/lib/v2ray/geoip.dat+installed: /usr/local/lib/v2ray/geosite.dat+installed: /usr/local/etc/v2ray/config.json-installed: /usr/local/etc/v2ray/00_log.json-installed: /usr/local/etc/v2ray/01_api.json-installed: /usr/local/etc/v2ray/02_dns.json-installed: /usr/local/etc/v2ray/03_routing.json-installed: /usr/local/etc/v2ray/04_policy.json-installed: /usr/local/etc/v2ray/05_inbounds.json-installed: /usr/local/etc/v2ray/06_outbounds.json-installed: /usr/local/etc/v2ray/07_transport.json-installed: /usr/local/etc/v2ray/08_stats.json-installed: /usr/local/etc/v2ray/09_reverse.json-installed: /var/log/v2ray/+installed: /var/log/v2ray/access.log+installed: /var/log/v2ray/error.log+installed: /etc/systemd/system/v2ray.service+installed: /etc/systemd/system/v2ray@.service+removed: /tmp/tmp.KojGXm19Pa/+info: V2Ray v4.27.0 is installed. 4.安裝最新發行的geoip.dat和geosite.dat1bash install-dat-release.sh 5.创建和编辑配置文件1234/usr/local/etc/v2ray #Finalshell 或者Mobaxterm 使用vim /usr/local/etc/v2rayvi /usr/local/etc/v2raynano /usr/local/etc/v2ray 在/usr/local/etc/v2ray下面创建或编辑config.json配置文件复制以下代码到config.json /usr/local/etc/v2ray/config.json123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137{ \"log\": { \"loglevel\": \"warning\" }, \"inbounds\": [ { \"port\": 443, \"protocol\": \"vless\", \"settings\": { \"clients\": [ { \"id\": \"\", // 填写你的 UUID \"flow\": \"xtls-rprx-origin\", \"level\": 0, \"email\": \"love@v2fly.org\" } ], \"decryption\": \"none\", \"fallbacks\": [ { \"dest\": 80 // 或者回落到其它也防探测的代理 }, { \"path\": \"/websocket\", // 必须换成自定义的 PATH \"dest\": 1234, \"xver\": 1 }, { \"path\": \"/vmesstcp\", // 必须换成自定义的 PATH \"dest\": 2345, \"xver\": 1 }, { \"path\": \"/vmessws\", // 必须换成自定义的 PATH \"dest\": 3456, \"xver\": 1 } ] }, \"streamSettings\": { \"network\": \"tcp\", \"security\": \"xtls\", \"xtlsSettings\": { \"alpn\": [ \"http/1.1\" ], \"certificates\": [ { \"certificateFile\": \"/@#E/v2ray.crt\", // 换成你的证书，绝对路径 \"keyFile\": \"/@#e/v2ray.key\" // 换成你的私钥，绝对路径 } ] } } }, { \"port\": 1234, \"listen\": \"127.0.0.1\", \"protocol\": \"vless\", \"settings\": { \"clients\": [ { \"id\": \"\", // 填写你的 UUID \"level\": 0, \"email\": \"love@v2fly.org\" } ], \"decryption\": \"none\" }, \"streamSettings\": { \"network\": \"ws\", \"security\": \"none\", \"wsSettings\": { \"acceptProxyProtocol\": true, // 提醒：若你用 Nginx/Caddy 等反代 WS，需要删掉这行 \"path\": \"/websocket\" // 必须换成自定义的 PATH，需要和分流的一致 } } }, { \"port\": 2345, \"listen\": \"127.0.0.1\", \"protocol\": \"vmess\", \"settings\": { \"clients\": [ { \"id\": \"\", // 填写你的 UUID \"level\": 0, \"email\": \"love@v2fly.org\" } ] }, \"streamSettings\": { \"network\": \"tcp\", \"security\": \"none\", \"tcpSettings\": { \"acceptProxyProtocol\": true, \"header\": { \"type\": \"http\", \"request\": { \"path\": [ \"/vmesstcp\" // 必须换成自定义的 PATH，需要和分流的一致 ] } } } } }, { \"port\": 3456, \"listen\": \"127.0.0.1\", \"protocol\": \"vmess\", \"settings\": { \"clients\": [ { \"id\": \"\", // 填写你的 UUID \"level\": 0, \"email\": \"love@v2fly.org\" } ] }, \"streamSettings\": { \"network\": \"ws\", \"security\": \"none\", \"wsSettings\": { \"acceptProxyProtocol\": true, // 提醒：若你用 Nginx/Caddy 等反代 WS，需要删掉这行 \"path\": \"/vmessws\" // 必须换成自定义的 PATH，需要和分流的一致 } } } ], \"outbounds\": [ { \"protocol\": \"freedom\" } ]} client_vless_tcp_tls.json123456789101112131415161718192021222324252627282930313233343536373839404142{ \"log\": { \"loglevel\": \"warning\" }, \"inbounds\": [ { \"port\": 10800, \"listen\": \"127.0.0.1\", \"protocol\": \"socks\", \"settings\": { \"udp\": true } } ], \"outbounds\": [ { \"protocol\": \"vless\", \"settings\": { \"vnext\": [ { \"address\": \"example.com\", // 换成你的域名或服务器 IP（发起请求时无需解析域名了） \"port\": 443, \"users\": [ { \"id\": \"\", // 填写你的 UUID \"encryption\": \"none\", \"level\": 0 } ] } ] }, \"streamSettings\": { \"network\": \"tcp\", \"security\": \"tls\", \"tlsSettings\": { \"serverName\": \"example.com\" // 换成你的域名 } } } ]} v2ray调试 123sudo systemctl restart v2raysudo systemctl status -l v2raysudo systemctl daemon-reload 设置v2ray开机启动 1systemctl enable v2ray client_vless_tcp_xtls.json123456789101112131415161718192021222324252627282930313233343536373839404142434445{ \"log\": { \"loglevel\": \"warning\" }, \"inbounds\": [ { \"port\": 10800, \"listen\": \"127.0.0.1\", \"protocol\": \"socks\", \"settings\": { \"udp\": true } } ], \"outbounds\": [ { \"protocol\": \"vless\", \"settings\": { \"vnext\": [ { \"address\": \"example.com\", // 换成你的域名或服务器 IP（发起请求时无需解析域名了） \"port\": 443, \"users\": [ { \"id\": \"\", // 填写你的 UUID \"flow\": \"xtls-rprx-origin\", \"encryption\": \"none\", \"level\": 0 } ] } ] }, \"streamSettings\": { \"network\": \"tcp\", \"security\": \"xtls\", // 需要使用 XTLS \"xtlsSettings\": { \"serverName\": \"example.com\" // 换成你的域名 } } } ]} vless_ws_tls.json12345678910111213141516171819202122232425262728293031323334353637383940414243444546{ \"log\": { \"loglevel\": \"warning\" }, \"inbounds\": [ { \"port\": 10800, \"listen\": \"127.0.0.1\", \"protocol\": \"socks\", \"settings\": { \"udp\": true } } ], \"outbounds\": [ { \"protocol\": \"vless\", \"settings\": { \"vnext\": [ { \"address\": \"example.com\", // 换成你的域名或服务器 IP（发起请求时无需解析域名了） \"port\": 443, \"users\": [ { \"id\": \"\", // 填写你的 UUID \"encryption\": \"none\", \"level\": 0 } ] } ] }, \"streamSettings\": { \"network\": \"ws\", \"security\": \"tls\", \"tlsSettings\": { \"serverName\": \"example.com\" // 换成你的域名 }, \"wsSettings\": { \"path\": \"/websocket\" // 必须换成自定义的 PATH，需要和服务端的一致 } } } ]} vmess_tcp_tls.json12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152{ \"log\": { \"loglevel\": \"warning\" }, \"inbounds\": [ { \"port\": 10800, \"listen\": \"127.0.0.1\", \"protocol\": \"socks\", \"settings\": { \"udp\": true } } ], \"outbounds\": [ { \"protocol\": \"vmess\", \"settings\": { \"vnext\": [ { \"address\": \"example.com\", // 换成你的域名或服务器 IP（发起请求时无需解析域名了） \"port\": 443, \"users\": [ { \"id\": \"\", // 填写你的 UUID \"security\": \"none\", \"level\": 0 } ] } ] }, \"streamSettings\": { \"network\": \"tcp\", \"security\": \"tls\", \"tlsSettings\": { \"serverName\": \"example.com\" // 换成你的域名 }, \"tcpSettings\": { \"header\": { \"type\": \"http\", \"request\": { \"path\": [ \"/vmesstcp\" // 必须换成自定义的 PATH，需要和服务端的一致 ] } } } } } ]} vmess_ws_tls.json12345678910111213141516171819202122232425262728293031323334353637383940414243444546{ \"log\": { \"loglevel\": \"warning\" }, \"inbounds\": [ { \"port\": 10800, \"listen\": \"127.0.0.1\", \"protocol\": \"socks\", \"settings\": { \"udp\": true } } ], \"outbounds\": [ { \"protocol\": \"vmess\", \"settings\": { \"vnext\": [ { \"address\": \"example.com\", // 换成你的域名或服务器 IP（发起请求时无需解析域名了） \"port\": 443, \"users\": [ { \"id\": \"\", // 填写你的 UUID \"security\": \"none\", \"level\": 0 } ] } ] }, \"streamSettings\": { \"network\": \"ws\", \"security\": \"tls\", \"tlsSettings\": { \"serverName\": \"example.com\" // 换成你的域名 }, \"wsSettings\": { \"path\": \"/vmessws\" // 必须换成自定义的 PATH，需要和服务端的一致 } } } ]} 创建文件夹指定证书和证书存放绝对路径地址，可以自定义。如/etc/v2ray下放置密钥和证书 生成证书如果你已经有其他证书可忽略，把证书和密钥放到服务器指定目录下。申请证书方法太多可通过安装acme.sh工具生成证书或其他方法生成证书，可Google搜索。 1.安装acem.sh证书生成工具，以下提供3种方法安装，选其中任意一种方法安装证书工具 (温馨提示：自动升级acme.sh在root下输入 acme.sh upgrade) /root/.acme.sh1234567curl https://get.acme.sh | sh // 如提示安装失败 请先安装curl 输入 yum -y install curlwget -O - https://get.acme.sh | sh //如提示安装失败请（先安装wget）输入 yum -y install wget 已经安装了忽略git clone https://github.com/acmesh-official/acme.sh.git // 如提示安装失败 先安装git 已经安装了的忽略 输入 yum install gitcd ./acme.sh./acme.sh --install 通过以上代码安装acme.sh提示红色抱错 你可以按实际相关情况而定安装依赖 比如安装socat 或者 netcat 12345678centos7 yum install opensslcentos7 yum install socat #通过80端口生成证书的依赖centos7 yum isntall netcat debian apt-get install openssl cron socat curldebian apt-get -y install netcat 安装成功后执行 source ~/.bashrc #以确保脚本所设置的命令别名生效 2.生成证书 路径为/root/.acme.sh文件下 安装好后可自行查看温馨提示：通过acme.sh生成证书有多种方法：例如—自动DNS API集成 如：cloudflare DNS API 令牌 和 使用全局API密钥 acme.sh支持大多数dns生成证书例如—使用DNS手动模式，等多种其他安装方法，如果你是个好学的人可Google 生成证书如下：本期视频只用指定端口 生成证书 推荐使用443端口生成证书 （一般用单域名足以，毕竟是翻墙用无需搞那么多花里胡哨的多域，比如：主域baidu.com那么不建议使用 www.baidu.com 因为是翻墙的前端web请自定义比如tw.baidu.com,前缀tw可以自定义请不要写太长，主域baidu.com和二级 www.baidu.com 可以备用你懂的 ） 通过侦听80端口申请证书，如果80端口被占用,请使用443端口,请确保这些端口都打开了 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone -k ec-256 如果您80在反向代理或负载均衡器后面使用非标准端口，则可以–httpport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --standalone --httpport 端口 侦听443端口以颁发证书，请确保443端口开启 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn -k ec-256 如果您443在反向代理或负载均衡器后面使用非标准端口，则可以–tlsport用来指定端口 1sudo ~/.acme.sh/acme.sh --issue -d 域名 --alpn --tlsport 端口 -k表示密钥长度，后面的值可以是 ec-256 、ec-384、2048、3072、4096、8192，带有 ec 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书 温馨提示：如何80或者443端口被占用导致我们无法申请密钥和证书，我们可以通过kill封杀端口在重新申请。 12345678netstat -tlnp|grep 80或者netstat -tlnp|grep 443然后kill 1103（这个1103是进程端口id）如果终止不了，可以强制终止kill -9 1103 证书和密钥到指定路径/etc/v2ray123ecc 迁移 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --eccrsa 迁移 sudo ~/.acme.sh/acme.sh --installcert -d 域名 --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key 將 /etc/v2ray/v2ray.key（路径可自定义） 修改為 644 权限 1chmod 644 /etc/v2ray/v2ray.key 8.BBr安装1wget \"https://raw.githubusercontent.com/ComeBey/rootfw-bbr/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh 9.查询tls开启状态https://www.ssllabs.com/ssltest/index.html 输入自己域名查询即可关于config.json配置文件可以自己写，当然也包括其他各种负载均衡，反向代理。如果想短时间内提升自己的可以参加我的培训课。 10.如果想卸载V2Ray执行下面代码1bash install-release.sh --remove 添加电报群","link":"/2020/10/25/VLESS-%E5%88%86%E6%B5%81%E7%BB%88%E6%9E%81%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Brook","slug":"Brook","link":"/tags/Brook/"},{"name":"翻墙","slug":"翻墙","link":"/tags/%E7%BF%BB%E5%A2%99/"},{"name":"定时重启","slug":"定时重启","link":"/tags/%E5%AE%9A%E6%97%B6%E9%87%8D%E5%90%AF/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"SSR","slug":"SSR","link":"/tags/SSR/"},{"name":"SS","slug":"SS","link":"/tags/SS/"},{"name":"科学上网","slug":"科学上网","link":"/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"name":"v2ray","slug":"v2ray","link":"/tags/v2ray/"},{"name":"tor","slug":"tor","link":"/tags/tor/"},{"name":"洋葱","slug":"洋葱","link":"/tags/%E6%B4%8B%E8%91%B1/"},{"name":"VIP","slug":"VIP","link":"/tags/VIP/"},{"name":"vless","slug":"vless","link":"/tags/vless/"},{"name":"xtls","slug":"xtls","link":"/tags/xtls/"},{"name":"xray","slug":"xray","link":"/tags/xray/"},{"name":"VLESS","slug":"VLESS","link":"/tags/VLESS/"},{"name":"H2C","slug":"H2C","link":"/tags/H2C/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"中转","slug":"中转","link":"/tags/%E4%B8%AD%E8%BD%AC/"},{"name":"暗网","slug":"暗网","link":"/tags/%E6%9A%97%E7%BD%91/"},{"name":"大数据","slug":"大数据","link":"/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"vip","slug":"vip","link":"/tags/vip/"},{"name":"brook","slug":"brook","link":"/tags/brook/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"服务器","slug":"服务器","link":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"防火墙","slug":"防火墙","link":"/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"通知","slug":"通知","link":"/tags/%E9%80%9A%E7%9F%A5/"}],"categories":[{"name":"科学上网","slug":"科学上网","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"name":"Centos7","slug":"Centos7","link":"/categories/Centos7/"},{"name":"github","slug":"github","link":"/categories/github/"},{"name":"SSR","slug":"科学上网/SSR","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/SSR/"},{"name":"Brook","slug":"科学上网/Brook","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/Brook/"},{"name":"SS","slug":"科学上网/SS","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/SS/"},{"name":"v2ray","slug":"科学上网/v2ray","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray/"},{"name":"python","slug":"Centos7/python","link":"/categories/Centos7/python/"},{"name":"xtls","slug":"xtls","link":"/categories/xtls/"},{"name":"v2ray","slug":"v2ray","link":"/categories/v2ray/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"tor","slug":"科学上网/v2ray/tor","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray/tor/"},{"name":"VIp","slug":"科学上网/v2ray/VIp","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray/VIp/"},{"name":"hexo","slug":"github/hexo","link":"/categories/github/hexo/"},{"name":"暗网","slug":"暗网","link":"/categories/%E6%9A%97%E7%BD%91/"},{"name":"vless","slug":"科学上网/v2ray/vless","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray/vless/"},{"name":"VIP培训","slug":"VIP培训","link":"/categories/VIP%E5%9F%B9%E8%AE%AD/"},{"name":"vless","slug":"xtls/vless","link":"/categories/xtls/vless/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"xray","slug":"v2ray/xray","link":"/categories/v2ray/xray/"},{"name":"VLESS","slug":"科学上网/v2ray/VLESS","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray/VLESS/"},{"name":"洋葱","slug":"科学上网/v2ray/tor/洋葱","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray/tor/%E6%B4%8B%E8%91%B1/"},{"name":"文章","slug":"VIP培训/文章","link":"/categories/VIP%E5%9F%B9%E8%AE%AD/%E6%96%87%E7%AB%A0/"},{"name":"centos7","slug":"Linux/centos7","link":"/categories/Linux/centos7/"},{"name":"vless","slug":"v2ray/xray/vless","link":"/categories/v2ray/xray/vless/"},{"name":"H2C","slug":"科学上网/v2ray/VLESS/H2C","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray/VLESS/H2C/"},{"name":"暗网","slug":"科学上网/v2ray/tor/洋葱/暗网","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/v2ray/tor/%E6%B4%8B%E8%91%B1/%E6%9A%97%E7%BD%91/"},{"name":"vip培训","slug":"vip培训","link":"/categories/vip%E5%9F%B9%E8%AE%AD/"},{"name":"文章","slug":"vip培训/文章","link":"/categories/vip%E5%9F%B9%E8%AE%AD/%E6%96%87%E7%AB%A0/"}]}